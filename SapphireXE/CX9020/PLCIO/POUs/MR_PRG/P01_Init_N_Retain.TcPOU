<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="P01_Init_N_Retain" Id="{a8718be4-384c-4de7-8ca5-edd4a1c3a55f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P01_Init_N_Retain
VAR RETAIN
    R_LH_TB_SV: ARRAY[0..14] OF REAL;

	R_SOL_IDX1: ARRAY[0..31] OF SINT;	
	R_SOL_IDX2: ARRAY[0..31] OF SINT;
	
	R_ETC_A: ARRAY[0..19] OF REAL;
	R_ETC_D: ARRAY[0..19] OF BOOL;
				
	R_EN_RAMP: ARRAY[0..29] OF BOOL;
	R_EN_RCP_RAMP: ARRAY[0..29] OF BOOL;
	
	R_EN_AL: ARRAY[0..143] OF BOOL;
	R_Dev_AL: ARRAY[0..29] OF WORD;	
	R_DevTM_AL: ARRAY[0..29] OF WORD;
	R_A_SV_AL: ARRAY[0..19] OF REAL; 	//Alarm analog check SV	
	
	R_EN_WN: ARRAY[0..63] OF BOOL;
	R_Dev_WN: ARRAY[0..29] OF WORD;	
	R_DevTM_WN: ARRAY[0..29] OF WORD;
	R_A_SV_WN: ARRAY[0..19] OF REAL;	//Warn analog check SV
	
	R_MIN: ARRAY[0..69] OF REAL; 
	R_MAX: ARRAY[0..69] OF REAL; 	
		
	R_US_D: ARRAY[0..3, 0..29] OF BYTE;	//User State - Digital
	R_US_A: ARRAY[0..3, 0..31] OF REAL; 	//User State - Analog 
	R_US_A_EN: ARRAY[0..3, 0..31] OF BOOL; 	//User State - Analog EN 
	
	R_MS_SET: ARRAY[0..5, 0..9] OF REAL; 	//Mo Source Set
	R_PV_ROT_INCH_PLS: REAL; 
	R_PV_ROT_1TURN_PLS: REAL;

    R_TV_posMode: BOOL; 	
END_VAR

VAR
	T1 : Ton := (PT:=T#1S);//dats save Timer
	idx, idx2 : DINT;
	cmp_RTM_UNIT : UINT;
	cmp_RTM_UNIT_STEPS : UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
T1(IN:= 1);

IF is_TCAT_started = 0 THEN	
	MEMMOVE(destAddr:=ADR(N_LH_TB_SV), srcAddr:=ADR(R_LH_TB_SV), n:=SIZEOF(N_LH_TB_SV));
	
	MEMMOVE(destAddr:=ADR(N_SOL1), srcAddr:=ADR(R_SOL_IDX1), n:=SIZEOF(N_SOL1));
	MEMMOVE(destAddr:=ADR(N_SOL2), srcAddr:=ADR(R_SOL_IDX2), n:=SIZEOF(N_SOL2));
	
	MEMMOVE(destAddr:=ADR(N_ETC_A), srcAddr:=ADR(R_ETC_A), n:=SIZEOF(N_ETC_A));
	MEMMOVE(destAddr:=ADR(N_ETC_D), srcAddr:=ADR(R_ETC_D), n:=SIZEOF(N_ETC_D));
	
	MEMMOVE(destAddr:=ADR(N_EN_RAMP), srcAddr:=ADR(R_EN_RAMP), n:=SIZEOF(N_EN_RAMP)); 
	MEMMOVE(destAddr:=ADR(N_EN_RCP_RAMP), srcAddr:=ADR(R_EN_RCP_RAMP), n:=SIZEOF(N_EN_RCP_RAMP));
	
	MEMMOVE(destAddr:=ADR(N_EN_AL), srcAddr:=ADR(R_EN_AL), n:=SIZEOF(N_EN_AL));		
	MEMMOVE(destAddr:=ADR(N_Dev_AL), srcAddr:=ADR(R_Dev_AL), n:=SIZEOF(N_Dev_AL));
	MEMMOVE(destAddr:=ADR(N_DevTM_AL), srcAddr:=ADR(R_DevTM_AL), n:=SIZEOF(N_DevTM_AL));	
	MEMMOVE(destAddr:=ADR(N_A_SV_AL), srcAddr:=ADR(R_A_SV_AL), n:=SIZEOF(N_A_SV_AL));
	
	MEMMOVE(destAddr:=ADR(N_EN_WN), srcAddr:=ADR(R_EN_WN), n:=SIZEOF(N_EN_WN));	
	MEMMOVE(destAddr:=ADR(N_Dev_WN), srcAddr:=ADR(R_Dev_WN), n:=SIZEOF(N_Dev_WN));
	MEMMOVE(destAddr:=ADR(N_DevTM_WN), srcAddr:=ADR(R_DevTM_WN), n:=SIZEOF(N_DevTM_WN));
	MEMMOVE(destAddr:=ADR(N_A_SV_WN), srcAddr:=ADR(R_A_SV_WN), n:=SIZEOF(N_A_SV_WN));	
		
	MEMMOVE(destAddr:=ADR(N_MIN), srcAddr:=ADR(R_MIN), n:=SIZEOF(N_MIN));
	MEMMOVE(destAddr:=ADR(N_MAX), srcAddr:=ADR(R_MAX), n:=SIZEOF(N_MAX));
   
	MEMMOVE(destAddr:=ADR(N_US_D), srcAddr:=ADR(R_US_D), n:=SIZEOF(N_US_D));
	MEMMOVE(destAddr:=ADR(N_US_A), srcAddr:=ADR(R_US_A), n:=SIZEOF(N_US_A));
	MEMMOVE(destAddr:=ADR(N_US_A_EN), srcAddr:=ADR(R_US_A_EN), n:=SIZEOF(N_US_A_EN));	
              
	MEMMOVE(destAddr:=ADR(N_MS_SET), srcAddr:=ADR(R_MS_SET), n:=SIZEOF(N_MS_SET));
   
	pv_ROT_inchPulse := R_PV_ROT_INCH_PLS;  
	pv_ROT_1turnPulse := 0;//PV_ROT_1TURN_PLS; 

    en_TV_posMode := R_TV_posMode; 
      
   //Default Value Check
  	ACT_Default_Value_Check();
	
	IF e_RTM_UNIT < 100 THEN e_RTM_UNIT := 100; END_IF
	IF e_RTM_UNIT_STEPS < 1 THEN e_RTM_UNIT_STEPS := 1; END_IF        	
	cmp_RTM_UNIT := e_RTM_UNIT ;
	cmp_RTM_UNIT_STEPS := e_RTM_UNIT_STEPS;
	RTM_UNIT := UINT_TO_TIME(e_RTM_UNIT / e_RTM_UNIT_STEPS);
		
	pv_US := -1;	
	IF e_US_START > 0 THEN
		CASE e_US_START OF
			1: cm_US1 := 1;
			2: cm_US2 := 1;
			3: cm_US3 := 1;
			4: cm_US4 := 1;
		END_CASE
	END_IF
	//tsv_Pres := sv_PRES:= 760;
	//rtm_Pres := 0;	
    ing_MAINT := 0;
END_IF

IF T1.Q AND is_TCAT_started = 0 THEN
	is_TCAT_started := 1;
END_IF


//변경되는 Retain Data 저장
IF is_TCAT_started THEN
	//always save
	IF T1.Q THEN
		MEMMOVE(destAddr:=ADR(R_LH_TB_SV), srcAddr:=ADR(N_LH_TB_SV), n:=SIZEOF(N_LH_TB_SV));
	END_IF	

	//SOL INDEX1 Data
   IF cm_SOL1_save THEN
		MEMMOVE(destAddr:=ADR(R_SOL_IDX1), srcAddr:=ADR(N_SOL1), n:=SIZEOF(N_SOL1));
	   cm_SOL1_save := 0;
   END_IF
   
   	//SOL INDEX2 Data
   IF cm_SOL2_save THEN
		MEMMOVE(destAddr:=ADR(R_SOL_IDX2), srcAddr:=ADR(N_SOL2), n:=SIZEOF(N_SOL2));
	   cm_SOL2_save := 0;
   END_IF

   //Etc System Data
   IF cm_ETC_save THEN
		MEMMOVE(destAddr:=ADR(R_ETC_A), srcAddr:=ADR(N_ETC_A), n:=SIZEOF(N_ETC_A));
		MEMMOVE(destAddr:=ADR(R_ETC_D), srcAddr:=ADR(N_ETC_D), n:=SIZEOF(N_ETC_D));
		cm_ETC_save := 0;
   END_IF

   IF cm_EN_RAMP_save THEN
	   MEMMOVE(destAddr:=ADR(R_EN_RAMP), srcAddr:=ADR(N_EN_Ramp), n:=SIZEOF(N_EN_Ramp));
	   MEMMOVE(destAddr:=ADR(R_EN_RCP_RAMP), srcAddr:=ADR(N_EN_RCP_RAMP), n:=SIZEOF(N_EN_RCP_RAMP));
	   cm_EN_RAMP_save := 0;
   END_IF

   //Alarm Data
   IF cm_AL_save THEN
	   MEMMOVE(destAddr:=ADR(R_EN_AL), srcAddr:=ADR(N_EN_AL), n:=SIZEOF(N_EN_AL));
	   MEMMOVE(destAddr:=ADR(R_Dev_AL), srcAddr:=ADR(N_Dev_AL), n:=SIZEOF(N_Dev_AL));
	   MEMMOVE(destAddr:=ADR(R_DevTM_AL), srcAddr:=ADR(N_DevTM_AL), n:=SIZEOF(N_DevTM_AL));
	   MEMMOVE(destAddr:=ADR(R_A_SV_AL), srcAddr:=ADR(N_A_SV_AL), n:=SIZEOF(N_A_SV_AL));
   	   cm_AL_save := 0;
   END_IF
   
   //Warning Data
   IF cm_WN_save THEN
	   MEMMOVE(destAddr:=ADR(R_EN_WN), srcAddr:=ADR(N_EN_WN), n:=SIZEOF(N_EN_WN));
	   MEMMOVE(destAddr:=ADR(R_Dev_WN), srcAddr:=ADR(N_Dev_WN), n:=SIZEOF(N_Dev_WN));
	   MEMMOVE(destAddr:=ADR(R_DevTM_WN), srcAddr:=ADR(N_DevTM_WN), n:=SIZEOF(N_DevTM_WN));
	   MEMMOVE(destAddr:=ADR(R_A_SV_WN), srcAddr:=ADR(N_A_SV_WN), n:=SIZEOF(N_A_SV_WN));      
   	   cm_WN_save := 0;
   END_IF    
         
	//Max Value
   IF cm_MAX_save THEN
	   MEMMOVE(destAddr:=ADR(R_MIN), srcAddr:=ADR(N_MIN), n:=SIZEOF(N_MIN));
	   MEMMOVE(destAddr:=ADR(R_MAX), srcAddr:=ADR(N_MAX), n:=SIZEOF(N_MAX));
	   cm_MAX_save := 0;
   END_IF
   
   //User State
   IF cm_US_save THEN
	   MEMMOVE(destAddr:=ADR(R_US_D), srcAddr:=ADR(N_US_D), n:=SIZEOF(N_US_D));
	   MEMMOVE(destAddr:=ADR(R_US_A), srcAddr:=ADR(N_US_A), n:=SIZEOF(N_US_A));
	   MEMMOVE(destAddr:=ADR(R_US_A_EN), srcAddr:=ADR(N_US_A_EN), n:=SIZEOF(N_US_A_EN));
	   cm_US_save := 0;
   END_IF
               	        
   	//Mo Source Weight init
	IF cm_MO_save THEN
		MEMMOVE(destAddr:=ADR(R_MS_SET), srcAddr:=ADR(N_MS_SET), n:=SIZEOF(N_MS_SET));
	   	cm_MO_save := 0;
	ELSE//Always Save
		IF T1.Q THEN
			FOR idx := 0 TO 5 DO
				FOR idx2 := 0 TO 9 DO
					R_MS_SET[idx, idx2] := N_MS_SET[idx, idx2];
				END_FOR
			END_FOR
		END_IF  	   
   	END_IF

   	//Rotation Pulse Total Sum
   	R_PV_ROT_INCH_PLS := pv_ROT_inchPulse; 
	R_PV_ROT_1TURN_PLS := pv_ROT_1turnPulse;
            
	IF (cmp_RTM_UNIT <> e_RTM_UNIT) OR (cmp_RTM_UNIT_STEPS <> e_RTM_UNIT_STEPS) THEN
		cmp_RTM_UNIT := e_RTM_UNIT;
		cmp_RTM_UNIT_STEPS := e_RTM_UNIT_STEPS;
		RTM_UNIT := UINT_TO_TIME(e_RTM_UNIT / e_RTM_UNIT_STEPS);   
	END_IF 

	IF cm_TV_presMode THEN
		en_TV_posMode := R_TV_posMode := 0;
		cm_TV_presMode := 0;
	END_IF  

	IF cm_TV_posMode THEN
	  	en_TV_posMode := R_TV_posMode := 1;
		cm_TV_posMode := 0;
	END_IF   
END_IF;


IF T1.Q THEN
	T1(IN:= 0);
END_IF
]]></ST>
    </Implementation>
    <Action Name="ACT_Default_Value_Check" Id="{44bd0130-0f01-440e-8e9d-9d0f835fa692}">
      <Implementation>
        <ST><![CDATA[   //Default Value Check
   IF e_ROT_AO_SLOPE_FACTOR = 0 THEN
	   e_ROT_AO_SLOPE_FACTOR := 1;
   END_IF
   IF e_ROT_SLOW_RPM = 0 THEN
	   e_ROT_SLOW_RPM := 1;
   END_IF
   IF e_ROT_60_RPM = 0 THEN
	   e_ROT_60_RPM := 1;
   END_IF
   IF e_ROT_60_PT = 0 THEN
	   e_ROT_60_PT := 750;
   END_IF   ]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="P01_Init_N_Retain">
      <LineId Id="49" Count="170" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="P01_Init_N_Retain.ACT_Default_Value_Check">
      <LineId Id="2" Count="11" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>