<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="P2P_LH" Id="{061e2c54-0f1f-491f-bad8-96fead5e05c6}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P2P_LH
VAR
	LH1_sv, LH2_sv, LH3_sv, LH4_sv, LH5_sv, LH6_sv, LH7_sv, LH8_sv: REAL := 0;
	LH1_at, LH2_at, LH3_at, LH4_at, LH5_at, LH6_at, LH7_at, LH8_at: BOOL := 0;
	
	T_TMOut: TON := (PT:=T#1S);
	iStep: INT := 1;
	bTx_en: BOOL;
	bTx_ok: BOOL;
	p2p_mode: INT; //1 = PV Req, 2 = STATUS Req, 3 = SV Write, 4 = AT On/Off
	p2p_cnt1, p2p_cnt2, p2p_cnt3, p2p_cnt4: INT := 0;
	
	addrMin: INT := 1;
	addrMax: INT := 8;
	
	//For Send
	T_Tx: TON := (PT:=T#10MS);
	fbTx: SendString;
	strTx: STRING;
	bTx_busy: BOOL;
	eTx_errID: ComError_t;	
			
	//For Receive
	T_Rx: TON := (PT:=T#10MS);
	bRx_ok: BOOL;	
	fbRx: ReceiveString;
	strRx: STRING;
	bRx_received: BOOL;
	bRx_busy: BOOL;
	eRx_errID: ComError_t;
	bRx_tmout: BOOL;
	strHex: STRING;	
		
	iPvDecimal: INT := 1;// Config Data
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//LH: Line Heater x 8EA -> 8Channel TIC 1EA
//Maker: HANYOUNG NUX
//Model: MC9-8RD0SS32
//Temp Range: -15 ~200℃
//RS485: 9600, DataBit(8), Parity(None), StopBit(1)
//BCC Check X

IF bTx_en = Off THEN
	bTx_en := 1;
	bTx_ok := bRx_ok := 0;
		
	IF p2p_mode <> 1 THEN //PV Req
		strTx := '$0201DRS,08,0001$0D$0A';
		p2p_mode := 1;
	ELSE //STATUS Req
		strTx := '$0201DRS,08,0111$0D$0A';
		p2p_mode := 2;
	END_IF
	
	//SV Change Check -> SV Write Mode
	IF LH1_sv <> sv_LH1 THEN
		LH1_sv := sv_LH1;
		strTx := CONCAT(CONCAT('$0201DWR,03,0301,0001,0302,0001,0401,', F_LH_SV(SV:= LH1_sv, nDecimal:= iPvDecimal)), '$0D$0A'); //0301(ZONE_NO),0001(ZONE_1),0302(CH_NO),0001(CH_1),0401(SV)		
		p2p_mode := 3;	
	ELSIF LH2_sv <> sv_LH2 THEN
		LH2_sv := sv_LH2;
		strTx := CONCAT(CONCAT('$0201DWR,03,0301,0001,0302,0002,0401,', F_LH_SV(SV:= LH2_sv, nDecimal:= iPvDecimal)), '$0D$0A'); //0301(ZONE_NO),0001(ZONE_1),0302(CH_NO),0002(CH_2),0401(SV)		
		p2p_mode := 3;		
	ELSIF LH3_sv <> sv_LH3 THEN
		LH3_sv := sv_LH3;
		strTx := CONCAT(CONCAT('$0201DWR,03,0301,0001,0302,0003,0401,', F_LH_SV(SV:= LH3_sv, nDecimal:= iPvDecimal)), '$0D$0A'); //0301(ZONE_NO),0001(ZONE_1),0302(CH_NO),0002(CH_3),0401(SV)		
		p2p_mode := 3;		
	ELSIF LH4_sv <> sv_LH4 THEN
		LH4_sv := sv_LH4;
		strTx := CONCAT(CONCAT('$0201DWR,03,0301,0001,0302,0004,0401,', F_LH_SV(SV:= LH4_sv, nDecimal:= iPvDecimal)), '$0D$0A'); //0301(ZONE_NO),0001(ZONE_1),0302(CH_NO),0002(CH_4),0401(SV)		
		p2p_mode := 3;		
	ELSIF LH5_sv <> sv_LH5 THEN
		LH5_sv := sv_LH5;
		strTx := CONCAT(CONCAT('$0201DWR,03,0301,0001,0302,0005,0401,', F_LH_SV(SV:= LH5_sv, nDecimal:= iPvDecimal)), '$0D$0A'); //0301(ZONE_NO),0001(ZONE_1),0302(CH_NO),0002(CH_5),0401(SV)		
		p2p_mode := 3;		
	ELSIF LH6_sv <> sv_LH6 THEN
		LH6_sv := sv_LH6;
		strTx := CONCAT(CONCAT('$0201DWR,03,0301,0001,0302,0006,0401,', F_LH_SV(SV:= LH6_sv, nDecimal:= iPvDecimal)), '$0D$0A'); //0301(ZONE_NO),0001(ZONE_1),0302(CH_NO),0002(CH_6),0401(SV)		
		p2p_mode := 3;	
	ELSIF LH7_sv <> sv_LH7 THEN
		LH7_sv := sv_LH7;
		strTx := CONCAT(CONCAT('$0201DWR,03,0301,0001,0302,0007,0401,', F_LH_SV(SV:= LH7_sv, nDecimal:= iPvDecimal)), '$0D$0A'); //0301(ZONE_NO),0001(ZONE_1),0302(CH_NO),0002(CH_7),0401(SV)		
		p2p_mode := 3;	
	ELSIF LH8_sv <> sv_LH8 THEN
		LH8_sv := sv_LH8;
		strTx := CONCAT(CONCAT('$0201DWR,03,0301,0001,0302,0008,0401,', F_LH_SV(SV:= LH8_sv, nDecimal:= iPvDecimal)), '$0D$0A'); //0301(ZONE_NO),0001(ZONE_1),0302(CH_NO),0002(CH_8),0401(SV)		
		p2p_mode := 3;	
	
	ELSIF LH1_at <> cm_LH1_at THEN//AT
		LH1_at := cm_LH1_at;
		IF LH1_at THEN	strTx := '$0201DWR,02,0302,0001,0501,0001$0D$0A'; 		 //0302(CH_NO),0001(CH_1),0501(AT),0001(AT-ON)
        ELSE			strTx := '$0201DWR,02,0302,0001,0501,0000$0D$0A'; END_IF//0302(CH_NO),0001(CH_1),0501(AT),0001(AT-OFF)		
		p2p_mode := 4;//AT Mode
	ELSIF LH2_at <> cm_LH2_at THEN//AT
		LH2_at := cm_LH2_at;
		IF LH2_at THEN	strTx := '$0201DWR,02,0302,0002,0501,0001$0D$0A'; 		 //0302(CH_NO),0002(CH_2),0501(AT),0001(AT-ON)
        ELSE			strTx := '$0201DWR,02,0302,0002,0501,0000$0D$0A'; END_IF//0302(CH_NO),0002(CH_2),0501(AT),0001(AT-OFF)		
		p2p_mode := 4;//AT Mode
	ELSIF LH3_at <> cm_LH3_at THEN//AT
		LH3_at := cm_LH3_at;
		IF LH3_at THEN	strTx := '$0201DWR,02,0302,0003,0501,0001$0D$0A'; 		 //0302(CH_NO),0003(CH_3),0501(AT),0001(AT-ON)
        ELSE			strTx := '$0201DWR,02,0302,0003,0501,0000$0D$0A'; END_IF//0302(CH_NO),0003(CH_3),0501(AT),0001(AT-OFF)		
		p2p_mode := 4;//AT Mode
	ELSIF LH4_at <> cm_LH4_at THEN//AT
		LH4_at := cm_LH4_at;
		IF LH4_at THEN	strTx := '$0201DWR,02,0302,0004,0501,0001$0D$0A'; 		 //0302(CH_NO),0004(CH_4),0501(AT),0001(AT-ON)
        ELSE			strTx := '$0201DWR,02,0302,0004,0501,0000$0D$0A'; END_IF//0302(CH_NO),0004(CH_4),0501(AT),0001(AT-OFF)		
		p2p_mode := 4;//AT Mode
	ELSIF LH5_at <> cm_LH5_at THEN//AT
		LH5_at := cm_LH5_at;
		IF LH5_at THEN	strTx := '$0201DWR,02,0302,0005,0501,0001$0D$0A'; 		 //0302(CH_NO),0005(CH_5),0501(AT),0001(AT-ON)
        ELSE			strTx := '$0201DWR,02,0302,0005,0501,0000$0D$0A'; END_IF//0302(CH_NO),0005(CH_5),0501(AT),0001(AT-OFF)		
		p2p_mode := 4;//AT Mode
	ELSIF LH6_at <> cm_LH6_at THEN//AT
		LH6_at := cm_LH6_at;
		IF LH6_at THEN	strTx := '$0201DWR,02,0302,0006,0501,0001$0D$0A'; 		 //0302(CH_NO),0006(CH_6),0501(AT),0001(AT-ON)
        ELSE			strTx := '$0201DWR,02,0302,0006,0501,0000$0D$0A'; END_IF//0302(CH_NO),0006(CH_6),0501(AT),0001(AT-OFF)		
		p2p_mode := 4;//AT Mode
	ELSIF LH7_at <> cm_LH7_at THEN//AT
		LH7_at := cm_LH7_at;
		IF LH7_at THEN	strTx := '$0201DWR,02,0302,0007,0501,0001$0D$0A'; 		 //0302(CH_NO),0007(CH_7),0501(AT),0001(AT-ON)
        ELSE			strTx := '$0201DWR,02,0302,0007,0501,0000$0D$0A'; END_IF//0302(CH_NO),0007(CH_7),0501(AT),0001(AT-OFF)		
		p2p_mode := 4;//AT Mode
	ELSIF LH8_at <> cm_LH8_at THEN//AT
		LH8_at := cm_LH8_at;
		IF LH8_at THEN	strTx := '$0201DWR,02,0302,0008,0501,0001$0D$0A'; 		 //0302(CH_NO),0008(CH_8),0501(AT),0001(AT-ON)
        ELSE			strTx := '$0201DWR,02,0302,0008,0501,0000$0D$0A'; END_IF//0302(CH_NO),0008(CH_8),0501(AT),0001(AT-OFF)		
		p2p_mode := 4;//AT Mode
	END_IF
	
END_IF


//Tx
T_Tx(IN:=bTx_en AND bTx_ok = 0);
IF T_Tx.Q OR fbTx.Busy THEN
	bTx_ok := 1;	
	fbTx(SendString:= strTx, TXbuffer:= TxBuf_LH, Busy=> bTx_busy, Error=> );	
	IF fbTx.Error <> COMERROR_NOERROR THEN
		eTx_errID := fbTx.Error;
		bTx_ok := 0;
	ELSE
		eTx_errID := COMERROR_NOERROR;
		bTx_ok := 1;					
	END_IF
END_IF

//Rx
fbRx(Prefix:= '$02', Suffix:= '$0D$0A',
	Timeout:= T#1S, ReceivedString:= strRx,
	RXbuffer:= RxBuf_LH, StringReceived=> bRx_received,
	Busy=> bRx_busy, Error=> eRx_errID,
	RxTimeout=> bRx_tmout);
	
IF bRx_received THEN
	bRx_received := 0;
	bRx_ok := 1;		
	//Read PV
	IF p2p_mode = 1 THEN //1 = PV Req		
		strHex := MID(STR:=strRx, LEN:=4, POS:=11); //'$0201DRS,OK,1900,1900,1900,1900,1900,1900,1900,1900$R$N' '$0D$0A' == '$R$N' 		
		pv_LH1 := F_LH_PV(hexPV:= strHex, nDecimal:= iPvDecimal);
		strHex := MID(STR:=strRx, LEN:=4, POS:=16); 
		pv_LH2 := F_LH_PV(hexPV:= strHex, nDecimal:= iPvDecimal);
		strHex := MID(STR:=strRx, LEN:=4, POS:=21); 
		pv_LH3 := F_LH_PV(hexPV:= strHex, nDecimal:= iPvDecimal);
		strHex := MID(STR:=strRx, LEN:=4, POS:=26); 
		pv_LH4 := F_LH_PV(hexPV:= strHex, nDecimal:= iPvDecimal);
		strHex := MID(STR:=strRx, LEN:=4, POS:=31); 
		pv_LH5 := F_LH_PV(hexPV:= strHex, nDecimal:= iPvDecimal);
		strHex := MID(STR:=strRx, LEN:=4, POS:=36); 
		pv_LH6 := F_LH_PV(hexPV:= strHex, nDecimal:= iPvDecimal);
		strHex := MID(STR:=strRx, LEN:=4, POS:=41); 
		pv_LH7 := F_LH_PV(hexPV:= strHex, nDecimal:= iPvDecimal);
		strHex := MID(STR:=strRx, LEN:=4, POS:=46); 
		pv_LH8 := F_LH_PV(hexPV:= strHex, nDecimal:= iPvDecimal);
		p2p_cnt1 := p2p_cnt1 + 1;
	ELSIF p2p_mode = 2 THEN //2 = STATUS Req			
		strHex := MID(STR:=strRx, LEN:=4, POS:=11); //'$0201DRS,OK,1900,1900,1900,1900,1900,1900,1900,1900$R$N' '$0D$0A' == '$R$N' 		
		is_LH1_run := strHex = '0002';
		is_LH1_at := strHex = '0004';
		is_LH1_err := strHex = '0080';
		strHex := MID(STR:=strRx, LEN:=4, POS:=16); 
		is_LH2_run := strHex = '0002';
		is_LH2_at := strHex = '0004';
		is_LH2_err := strHex = '0080';
		strHex := MID(STR:=strRx, LEN:=4, POS:=21); 
		is_LH3_run := strHex = '0002';
		is_LH3_at := strHex = '0004';
		is_LH3_err := strHex = '0080';
		strHex := MID(STR:=strRx, LEN:=4, POS:=26); 
		is_LH4_run := strHex = '0002';
		is_LH4_at := strHex = '0004';
		is_LH4_err := strHex = '0080';
		strHex := MID(STR:=strRx, LEN:=4, POS:=31); 
		is_LH5_run := strHex = '0002';
		is_LH5_at := strHex = '0004';
		is_LH5_err := strHex = '0080';
		strHex := MID(STR:=strRx, LEN:=4, POS:=36); 
		is_LH6_run := strHex = '0002';
		is_LH6_at := strHex = '0004';
		is_LH6_err := strHex = '0080';
		strHex := MID(STR:=strRx, LEN:=4, POS:=41); 
		is_LH7_run := strHex = '0002';
		is_LH7_at := strHex = '0004';
		is_LH7_err := strHex = '0080';
		strHex := MID(STR:=strRx, LEN:=4, POS:=46); 
		is_LH8_run := strHex = '0002';
		is_LH8_at := strHex = '0004';
		is_LH8_err := strHex = '0080';
		p2p_cnt2 := p2p_cnt2 + 1;
	ELSIF p2p_mode = 3 THEN //3 = SV Write
		p2p_cnt3 := p2p_cnt3 + 1;
	ELSIF p2p_mode = 4 THEN //4 = AT On/Off
		p2p_cnt4 := p2p_cnt4 + 1;		
	END_IF
END_IF
	
//Next LH
T_Rx(IN:= bRx_ok);
T_TMOut(IN:= 1);
IF T_Rx.Q OR T_TMOut.Q THEN
	T_Rx(IN:= 0);
	T_TMOut(IN:= 0);
	bTx_en := 0;
	IF iStep < addrMax THEN	
		iStep := iStep + 1;
	ELSE					
		iStep := addrMin; 
	END_IF
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="P2P_LH">
      <LineId Id="41" Count="194" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>