<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="P2P_TB" Id="{e60ff1f7-0a3b-4a53-a4d6-b74dffd51b99}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P2P_TB
VAR
    TB1_SV, TB2_SV, TB3_SV, TB4_SV, TB5_SV, TB6_SV: REAL := 0;
	T_P2P_EN: TON := (PT:=T#10S);//통신 가능 -> TB MC 켜지고 TB 초기활 될때 까지 기다림. 이유 SMC TB가 전원이 새로 켜지면 SV를 읽어버린는 현상이 있음
	
	T_TMOut: TON := (PT:=T#1S);
	iStep: INT := 1;
	bTx_en: BOOL;
	bTx_ok: BOOL;
	bSV_mode: BOOL;
	addrMin: INT := 1;
	addrMax: INT := 6;
	
	//For Send
	T_Tx: TON := (PT:=T#10MS);
	fbTx: SendString;
	strTx: STRING;
	strTx_TEST: STRING;
	bTx_busy: BOOL;
	eTx_errID: ComError_t;	
		
	//For Receive
	T_Rx: TON := (PT:=T#10MS);
	bRx_ok: BOOL;	
	fbRx: ReceiveString;
	strRx: STRING;
	bRx_received: BOOL;
	bRx_busy: BOOL;
	eRx_errID: ComError_t;
	bRx_tmout: BOOL;
	strPV: STRING;

	iPvDecimal: INT := 1;// Config Data			
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//TB: Thermal Bath x 6EA
//Maker: SMC
//Model: HEBC002-WA10
//Temp Range: -15 ~60℃
//RS485: 9600, DataBit(8), Parity(None), StopBit(1)
//BCC Check X

T_P2P_EN(IN:= do_TB_MC);

IF T_P2P_EN.Q AND bTx_en = Off THEN
	bTx_en := 1;
	bTx_ok := bRx_ok := 0;
	bSV_mode := 0;
	CASE iStep OF
	1:
	 IF TB1_SV <> sv_TB1 OR is_TB1_485_err THEN
		 TB1_SV := sv_TB1;
		 strTx := CONCAT(CONCAT('$0201WSV1', F_TB_SV2STR(TB1_SV)), '$03'); //TB1 SV Send
		 strTx_TEST := strTx;
		 bSV_mode := 1;
	 ELSE
		 strTx := '$0201RPV1$03'; //TB1 PV Req 
	 END_IF	
	2:
	 IF TB2_SV <> sv_TB2 OR is_TB2_485_err THEN
		 TB2_SV := sv_TB2;
		 strTx := CONCAT(CONCAT('$0202WSV1', F_TB_SV2STR(TB2_SV)), '$03'); //TB2 SV Send
		 bSV_mode := 1;
	 ELSE
		 strTx := '$0202RPV1$03'; //TB2 PV Req
	 END_IF
	3:
	 IF TB3_SV <> sv_TB3 OR is_TB3_485_err THEN
		 TB3_SV := sv_TB3;
		 strTx := CONCAT(CONCAT('$0203WSV1', F_TB_SV2STR(TB3_SV)), '$03'); //TB3 SV Send
		 bSV_mode := 1;
	 ELSE
		 strTx := '$0203RPV1$03'; //TB3 PV Req		
	 END_IF
	4:
	 IF TB4_SV <> sv_TB4 OR is_TB4_485_err THEN
		 TB4_SV := sv_TB4;
		 strTx := CONCAT(CONCAT('$0204WSV1', F_TB_SV2STR(TB4_SV)), '$03'); //TB4 SV Send
		 bSV_mode := 1;
	 ELSE
		 strTx := '$0204RPV1$03'; //TB4 PV Req		 
	 END_IF
	5:
	 IF TB5_SV <> sv_TB5 OR is_TB5_485_err THEN
		 TB5_SV := sv_TB5;
		 strTx := CONCAT(CONCAT('$0205WSV1', F_TB_SV2STR(TB5_SV)), '$03'); //TB5 SV Send
		 bSV_mode := 1;
	 ELSE
		 strTx := '$0205RPV1$03'; //TB5 PV Req		 
	 END_IF
	6:
	 IF TB6_SV <> sv_TB6 OR is_TB6_485_err THEN
		 TB6_SV := sv_TB6;
		 strTx := CONCAT(CONCAT('$0206WSV1', F_TB_SV2STR(TB6_SV)), '$03'); //TB6 SV Send
		 bSV_mode := 1;
	 ELSE
		 strTx := '$0206RPV1$03'; //TB6 PV Req		 
	 END_IF	
	END_CASE;
	
END_IF;


//Tx
T_Tx(IN:=bTx_en AND bTx_ok = 0 );
IF T_Tx.Q OR fbTx.Busy THEN
	bTx_ok := 1;	
	fbTx(SendString:= strTx, TXbuffer:= TxBuf_TB, Busy=> bTx_busy, Error=> );	
	IF fbTx.Error <> COMERROR_NOERROR THEN
		eTx_errID := fbTx.Error;
		bTx_ok := 0;
	ELSE
		eTx_errID := COMERROR_NOERROR;
		bTx_ok := 1;					
	END_IF;
END_IF;

//Rx
fbRx(Prefix:= '$02', Suffix:= '$03',
	Timeout:= T#1S, ReceivedString:= strRx,
	RXbuffer:= RxBuf_TB, StringReceived=> bRx_received,
	Busy=> bRx_busy, Error=> eRx_errID,
	RxTimeout=> bRx_tmout);
	
IF bRx_received THEN
	bRx_received := 0;
	bRx_ok := 1;	
	
	IF bSV_mode THEN//Write SV				
		strPV := MID(STR:=strRx, LEN:=1, POS:=4); //'$06' TB:'$0201$06$03'
		IF strPV = '$06' THEN
			CASE iStep OF
				1: 	is_TB1_485_err := 0;
				2:	is_TB2_485_err := 0;
				3:	is_TB3_485_err := 0;
				4:	is_TB4_485_err := 0;
				5:	is_TB5_485_err := 0;
				6:	is_TB6_485_err := 0;
			END_CASE;	
		END_IF;
	ELSE//Read PV						
		strPV := MID(STR:=strRx, LEN:=5, POS:=8); //TB:'$0201$06PV100250$03'
		IF strPV = 'HHHHH' THEN
			CASE iStep OF
				1: 	pv_TB1 := -1.0; is_TB1_TC_bk := 1; is_TB1_485_err := 0;
				2:	pv_TB2 := -1.0; is_TB2_TC_bk := 1; is_TB2_485_err := 0;
				3:	pv_TB3 := -1.0; is_TB3_TC_bk := 1; is_TB3_485_err := 0;
				4:	pv_TB4 := -1.0; is_TB4_TC_bk := 1; is_TB4_485_err := 0;
				5:	pv_TB5 := -1.0; is_TB5_TC_bk := 1; is_TB5_485_err := 0;
				6:	pv_TB6 := -1.0; is_TB6_TC_bk := 1; is_TB6_485_err := 0;
			END_CASE;	
		ELSE
			CASE iStep OF
				1: 	pv_TB1 := F_TB_PV2REAL(strPV); is_TB1_TC_bk := 0; is_TB1_485_err := 0;      //F_LH_PV(hexPV:= strPV, nDecimal:= iPvDecimal);
				2:	pv_TB2 := F_TB_PV2REAL(strPV); is_TB2_TC_bk := 0; is_TB2_485_err := 0;
				3:	pv_TB3 := F_TB_PV2REAL(strPV); is_TB3_TC_bk := 0; is_TB3_485_err := 0;
				4:	pv_TB4 := F_TB_PV2REAL(strPV); is_TB4_TC_bk := 0; is_TB4_485_err := 0;
				5:	pv_TB5 := F_TB_PV2REAL(strPV); is_TB5_TC_bk := 0; is_TB5_485_err := 0;
				6:	pv_TB6 := F_TB_PV2REAL(strPV); is_TB6_TC_bk := 0; is_TB6_485_err := 0;
			END_CASE;
		END_IF;
	END_IF;	
END_IF;
	
//Next TB
//addrMax := 6;
T_Rx(IN:= bRx_ok);
T_TMOut(IN:= bRx_received = 0);
IF T_Rx.Q OR T_TMOut.Q THEN
	T_Rx(IN:= 0);	
	bTx_en := 0;
	
	IF T_TMOut.Q THEN //TimeOut Error Check
		CASE iStep OF
		1: 	is_TB1_485_err := 1;
		2:	is_TB2_485_err := 1;
		3:	is_TB3_485_err := 1;
		4:	is_TB4_485_err := 1;
		5:	is_TB5_485_err := 1;
		6:	is_TB6_485_err := 1;
		END_CASE;	
	END_IF;
	T_TMOut(IN:= 0);
	
	IF iStep < addrMax THEN	
		iStep := iStep + 1;
	ELSE					
		iStep := addrMin; 
	END_IF;
END_IF;
]]></ST>
    </Implementation>
    <LineIds Name="P2P_TB">
      <LineId Id="40" Count="154" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>