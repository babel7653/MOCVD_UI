<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="RecipeHandler" Id="{b63c9858-665b-4c98-a89e-1dfd76253efd}" SpecialFunc="None">
    <Declaration><![CDATA[/// 이 어플리케이션은 ST언어로 RecipeManagement 라이브러리 사용 예제
PROGRAM RecipeHandler
VAR CONSTANT
	AllRecipeDefinitions : ARRAY[0..1] OF STRING := [ 'Recipe1', 'Array1'];
END_VAR
VAR
	initRecipe : BOOL :=TRUE;
	fbFormat : FB_FormatString;

	RecipeManCommands 		: RecipeManCommands; (* Recipe Manager *)
	RecipeDefinition		: IRecipeDefinition2; // current
	
	dwLastError 			: DWORD; (* Error from Recipe Manager *)
	iRecipesCount 			: INT;
	
	sRecipeDef 				: STRING := AllRecipeDefinitions[1]; (* current recipe definition *)
	sRecipe 				: STRING; (*Selected recipe *)
	sRecipeIndex			: INT := 1; // selected recipe index of recipes
	
	xReloadFromFile 		: BOOL; (* Refresh recipes from files *)

	xSaveVariables			: BOOL; // save the variables currently visible in the table to the recipe
	xRefreshRecipes 		: BOOL := False; // refresh the names of the recipes in the currently selected definition
	xReloadValues			: BOOL; // reload the variables and values in the currently selected recipe
	
	xCreateRecipe 			: BOOL; // Creates a new recipe
	xLoadAndWriteRecipe		: BOOL;	
	xDeleteRecipe			: BOOL; // Deletes the selected recipe

	xIsEditingVariable		: BOOL; // signals that one of the textfields where the variable values can be edited is currently being edited
	
	// recipe name을 선택하기 위한 드롭다운
	iRecipeDefinitonNameIndex : INT; // index of the currently selected entry in the Recipe definitions name dropdown
	iPrevRecipeDefinitonNameIndex : INT := -1; // previous index of the currently selected entry in the Recipe definitions name dropdown (to detect refresh needed)
	
	// recipe name들을 표시하기 위한 테이블 작성
	arrRecipeNames 			: ARRAY[0..MAX_TABLE_ROWS-1] OF STRING; // array where the names of the recipes are being stored
	
	iPrevSelectionIndex	 	: INT; // Last selected index of rows
	iRecipeScrollIndex 		: INT; // index showing how far the recipe names table is scrolled
	iPrevScrollIndex 		: INT; // previous value of iRecipeScrollIndex
	iRecipeSelectionIndex 	: INT; // index into the recipe names array
	
	// for the table that displays the variables of a recipe
	arrVariableNames 		: ARRAY[0..(MAX_VARIABLES_TABLE_ROWS-1)] OF STRING; // array where variable names are temporarily stored so they can be displayed
	arrVariableValues 		: ARRAY[0..(MAX_VARIABLES_TABLE_ROWS-1)] OF STRING; // array where variable values are temporarily stored so they can be displayed
	iVariableIndex			: INT; // index into the arrays above which indicates the variable currently being displayed in the first row
	iPrevVariableIndex		: INT; // iVariableIndex from previous call to allow detecting changes
	iVariableCount 			: DINT; // number of variables in the recipe
END_VAR
VAR CONSTANT
	MAX_VARIABLES_TABLE_ROWS 	: INT := 100;
	MAX_TABLE_ROWS 				: INT := 100;
END_VAR
VAR_OUTPUT
	hasError : BOOL; // if there is some sort of internal error
END_VAR
VAR_TEMP
	i : INT; // loop index
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[hasError := FALSE;

IF initRecipe THEN
	iRecipesCount := RecipeManCommands.GetRecipeCount(sRecipeDef);

	FOR i := 1 TO iRecipesCount DO
		xCreateRecipe := TRUE;
		fbFormat(sFormat := 'r%d', arg1 := F_INT(sRecipeIndex), sOut => sRecipe);
		IF xCreateRecipe THEN
			IF RecipeManCommands.CreateRecipe(sRecipeDef, sRecipe) <> ERR_OK THEN
				hasError := TRUE;
				RETURN;
			END_IF
		//	xRefreshRecipes := TRUE;
		END_IF
	
	END_FOR
	xCreateRecipe := FALSE;
	initRecipe := FALSE;	
END_IF


//// check if one of the variables has been edited
//// NOTE: to prevent bad timing effects this PRG should be executed in VisuTask
//IF xIsEditingVariable AND VisuInit.TFHandler.finishedEdit (* this must be manually set to false when the edit begins*) THEN
//	VisuInit.TFHandler.finishedEdit := FALSE;
//	xSaveVariables := TRUE;
//	xIsEditingVariable := FALSE;
//END_IF

//(* Set the edited values into the recipe *)
//IF xSaveVariables THEN
////	RecipeManCommands.SetRecipeValues(sRecipeDef, sRecipe, ADR(arrVariableValues), MAX_VARIABLES_TABLE_ROWS, iVariableIndex);
//	RecipeManCommands.SaveRecipe(sRecipeDef, sRecipe);
//	xSaveVariables := FALSE;
//END_IF

//// get current recipe definition name from visu
//IF iPrevRecipeDefinitonNameIndex <> iRecipeDefinitonNameIndex THEN
//	sRecipeDef := AllRecipeDefinitions[iRecipeDefinitonNameIndex];
//	xRefreshRecipes := TRUE;
//	xReloadValues := TRUE;
//END_IF
//iPrevRecipeDefinitonNameIndex := iRecipeDefinitonNameIndex;

//(* Load the list of the recipes in the selected recipe definition*)
//IF xRefreshRecipes THEN
//	(* Save the number of recipes in the specified recipe definition in a global variable.*)
//	iRecipesCount := RecipeManCommands.GetRecipeCount(sRecipeDef);
//	(* Empty all arrays *)
//	FOR i := 0 TO MAX_TABLE_ROWS DO
//		arrRecipeNames[i] := '';
//		arrVariableNames[i] := '';
//		arrVariableValues[i] := '';
//	END_FOR
//	(* save all recipe names of one recipe definition in an array *)
//	RecipeManCommands.GetRecipeNames(sRecipeDef, ADR(arrRecipeNames), 10, iRecipeScrollIndex);
//	xReloadValues := TRUE;
//	xRefreshRecipes := FALSE;
//END_IF

//dwLastError := RecipeManCommands.GetLastError();

//(* Scroll position of the recipe list has changed. *)
//IF iRecipeScrollIndex <> iPrevScrollIndex THEN
//	RecipeManCommands.GetRecipeNames(sRecipeDef, ADR(arrRecipeNames), 10, iRecipeScrollIndex);
//	iPrevScrollIndex := iRecipeScrollIndex;
//END_IF

//(* Selection of the current recipe has changed *)
//IF iRecipeSelectionIndex <> iPrevSelectionIndex OR iPrevVariableIndex <> iVariableIndex OR xReloadValues THEN
//	iPrevSelectionIndex := iRecipeSelectionIndex;
//	iPrevVariableIndex := iVariableIndex;

//	(* Get the selected recipe name *)
//	// the (iRecipeSelectionIndex - iRecipeScrollIndex) thing is needed so we get the index into the names array
//	IF (iRecipeSelectionIndex - iRecipeScrollIndex) >= 0 AND (iRecipeSelectionIndex - iRecipeScrollIndex) < MAX_TABLE_ROWS THEN
//		sRecipe := arrRecipeNames[(iRecipeSelectionIndex - iRecipeScrollIndex)];
//	END_IF
	
//	// update number of variables for the new recipe
//	iRecipesCount := RecipeManCommands.GetRecipeCount(sRecipeDef); // this makes sure that _RecipeDefinition is set to the one we want
//	IF __QUERYINTERFACE(RecipeManCommands._RecipeDefinition, RecipeDefinition) THEN
//		{analysis -46} // RecipeDefinition is definitly initialized
//		iVariableCount := RecipeDefinition.GetRecipeVariableCount();
//		{analysis +46}
//	ELSE
//		iVariableCount := 999; // set a default if we cannot determine it
//	END_IF

//	IF RecipeManCommands.GetRecipeValues(sRecipeDef, sRecipe, ADR(arrVariableValues), MAX_VARIABLES_TABLE_ROWS, iVariableIndex, 80) <> ERR_OK OR_ELSE
//		LEN(sRecipe) = 0 (* for empty string ERR_OK is returned, so we need to manually check for that *)
//	THEN	
//		// error while loading, blank out the column
//		FOR i := 0 TO 	MAX_VARIABLES_TABLE_ROWS - 1 DO
//			arrVariableValues[i] := 'xxx';
//		END_FOR
//	END_IF
//	IF RecipeManCommands.GetRecipeVariableNames(sRecipeDef, sRecipe, ADR(arrVariableNames), MAX_VARIABLES_TABLE_ROWS, iVariableIndex) <> ERR_OK THEN
//		// error while loading, blank out the column
//		FOR i := 0 TO 	MAX_VARIABLES_TABLE_ROWS - 1 DO
//			arrVariableValues[i] := 'yyy';
//		END_FOR
//	END_IF

//	xReloadValues := FALSE;
//END_IF

(* Reload the recipe list from the file system *)
//IF xReloadFromFile THEN
//	IF RecipeManCommands.ReloadRecipes(sRecipeDef) <> ERR_OK THEN
//		hasError := TRUE;
//		RETURN;
//	END_IF
////	xRefreshRecipes := TRUE;
////	xReloadFromFile := FALSE;
//END_IF

IF xCreateRecipe THEN
	IF RecipeManCommands.CreateRecipe(sRecipeDef, sRecipe) <> ERR_OK THEN
		hasError := TRUE;
		RETURN;
	END_IF
	xCreateRecipe := FALSE;	
//	xRefreshRecipes := TRUE;
END_IF

IF xLoadAndWriteRecipe THEN
	fbFormat(sFormat := 'r%d', arg1 := F_INT(sRecipeIndex), sOut => sRecipe);

	IF RecipeManCommands.LoadandWriteRecipe(sRecipeDef, sRecipe) <> ERR_OK THEN
		hasError := TRUE;
		RETURN;
	END_IF
//	xRefreshRecipes := TRUE;
//	xReloadFromFile := FALSE;
END_IF

IF xDeleteRecipe THEN
	IF RecipeManCommands.DeleteRecipe(sRecipeDef, sRecipe) <> ERR_OK THEN
		hasError := TRUE;
		RETURN;
	END_IF
//	xRefreshRecipes := TRUE;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="RecipeHandler">
      <LineId Id="59" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="463" Count="1" />
      <LineId Id="440" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="441" Count="10" />
      <LineId Id="457" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="61" Count="86" />
      <LineId Id="158" Count="4" />
      <LineId Id="164" Count="8" />
      <LineId Id="524" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="283" Count="1" />
      <LineId Id="460" Count="1" />
      <LineId Id="285" Count="3" />
      <LineId Id="290" Count="2" />
      <LineId Id="236" Count="0" />
      <LineId Id="176" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>