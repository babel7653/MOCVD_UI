<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwinCAT.Ads.Reactive</name>
    </assembly>
    <members>
        <member name="T:TwinCAT.Ads.Reactive.AdsClientExtensions">
            <summary>
            Extension class for AdsClient respective <see cref="T:TwinCAT.Ads.IAdsConnection"/> to provide reactive ADS extensions.
            </summary>
            <remarks>
            Reactive Extensions (Rx) are a library for composing asynchronous and event-based programs using observable sequences and LINQ-style
            query operators. Using Rx, developers represent asynchronous data streams with Observables, query asynchronous data streams using LINQ
            operators, and parameterize the concurrency in the asynchronous data streams using Schedulers. Simply put, Rx = Observables + LINQ + Schedulers.
            The ADS reactive extensions are build on top of this library to enable ADS Symbol and State Observables, seamlessly bound to the reactive
            extensions. To use the ADS reactive extensions the TwinCAT.Ads.Reactive Nuget package (or the included TwinCAT.Ads.Reactive.dll) must be referenced.
            (<a href="https://www.nuget.org/packages/Beckhoff.TwinCAT.Ads.Reactive/">Beckhoff.TwinCAT.Ads.Reactive package on Nuget</a>).
            </remarks>
            <example>
            The following sample shows how observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions"/>
            <code language="C#" title="Observe changing ADS Symbols with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_SYMBOLS" />
            </example>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState"/> changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions"/>
            <code language="C#" title="Observe changing ADS states with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGE" />
            </example>
            <seealso cref="T:TwinCAT.Ads.Reactive.AnyTypeExtensions"/>
            <seealso cref="T:TwinCAT.Ads.Reactive.ValueSymbolExtensions"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenRegisteredNotificationEx(TwinCAT.Ads.IAdsNotifications)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.AdsNotificationExEventArgs"/>.
            </summary>
            <param name="client">The client.</param>
            <returns>IObservable&lt;AdsNotificationExEventArgs&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenRegisteredNotification(TwinCAT.Ads.IAdsNotifications)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.Notification"/>s.
            </summary>
            <param name="client">The client.</param>
            <returns>IObservable&lt;NotificationValue&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenRegisteredNotification(TwinCAT.Ads.IAdsNotifications,System.UInt32[])">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.Notification"/>s.
            </summary>
            <param name="client">The client.</param>
            <param name="handles">The handles.</param>
            <returns>IObservable&lt;NotificationValue&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenAdsStateChanges(TwinCAT.Ads.IAdsConnection)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.AdsState"/>s.
            </summary>
            <param name="client">The client.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState"/> changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions"/>
            <code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGE" />
            </example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollAdsState(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollAdsState(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit})">
             <summary>
             Gets an observable sequence of <see cref="T:TwinCAT.Ads.AdsState" />s via Polling.
             </summary>
             <param name="client">The client.</param>
             <param name="trigger">The polling trigger</param>
             <returns>IObservable&lt;AdsState&gt;.</returns>
             <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenAdsStateChanges(TwinCAT.Ads.IAdsConnection)"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollAdsState2(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit})">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ResultReadAdsState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="trigger">The polling trigger</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollDeviceState(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit})">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ResultReadDeviceState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="trigger">The polling trigger</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollAdsStateAsync(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit},System.Threading.CancellationToken)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.AdsState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="trigger">The polling trigger</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenAdsStateChanges(TwinCAT.Ads.IAdsConnection)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollAdsState2Async(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit},System.Threading.CancellationToken)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.AdsState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="trigger">The polling trigger</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollDeviceStateAsync(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit},System.Threading.CancellationToken)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ResultReadDeviceState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="trigger">The polling trigger</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenAdsStateChanges(TwinCAT.Ads.IAdsConnection)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollAdsStateAsync(TwinCAT.Ads.IAdsConnection,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.AdsState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interval">The interval.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenAdsStateChanges(TwinCAT.Ads.IAdsConnection)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollAdsState2Async(TwinCAT.Ads.IAdsConnection,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ResultReadAdsState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interval">The interval.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IObservable&lt;ResultReadAdsState&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollDeviceStateAsync(TwinCAT.Ads.IAdsConnection,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ResultReadDeviceState" />s via Polling.
            </summary>
            <param name="connection">The client.</param>
            <param name="interval">The interval.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenAdsStateChanges(TwinCAT.Ads.IAdsConnection)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollAdsState(TwinCAT.Ads.IAdsConnection,System.TimeSpan)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.AdsState" />s via Polling.
            </summary>
            <param name="connection">The connnection.</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenAdsStateChanges(TwinCAT.Ads.IAdsConnection)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollAdsState2(TwinCAT.Ads.IAdsConnection,System.TimeSpan)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ResultReadAdsState" />s via Polling.
            </summary>
            <param name="connection">The connnection.</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenAdsStateChanges(TwinCAT.Ads.IAdsConnection)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.PollDeviceState(TwinCAT.Ads.IAdsConnection,System.TimeSpan)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ResultReadDeviceState" />s via Polling.
            </summary>
            <param name="connection">The client.</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenAdsStateChanges(TwinCAT.Ads.IAdsConnection)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenSymbolVersionChanges(TwinCAT.Ads.IAdsConnection)">
            <summary>
            Gets an observable sequence of SymbolVersion changed counts.
            </summary>
            <param name="connection">The client.</param>
            <returns>Counter, unique only within the <see cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenSymbolVersionChanges(TwinCAT.Ads.IAdsConnection)" /> observable.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenSymbolVersionChanges(TwinCAT.Ads.IAdsConnection,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Gets an observable sequence of SymbolVersion changed counts.
            </summary>
            <param name="connection">The client.</param>
            <param name="scheduler">The scheduler.</param>
            <returns>Counter, unique only within the <see cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenSymbolVersionChanges(TwinCAT.Ads.IAdsConnection,System.Reactive.Concurrency.IScheduler)" /> observable.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.Reactive.SymbolValueNotification" />s.
            </summary>
            <param name="client">The client.</param>
            <param name="symbol">The symbol to observe.</param>
            <param name="settings">Notification settings.</param>
            <returns>IObservable&lt;NotificationValue&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Symbol is not an IValueSymbol - symbol</exception>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.NotificationSettings)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.Notification"/>s.
            </summary>
            <param name="client">The client.</param>
            <param name="symbol">The symbol.</param>
            <returns>IObservable&lt;NotificationValue&gt;.</returns>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.NotificationSettings)"/>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.NotificationSettings)"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.NotificationSettings)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.Notification" /> objects.
            </summary>
            <param name="client">The client.</param>
            <param name="symbols">The symbols to observe.</param>
            <param name="settings">The Notification settings.</param>
            <returns>IObservable&lt;NotificationValue&gt;.</returns>
            <example>
            The following sample shows how observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions" /><code language="C#" title="Observe changing ADS Symbols with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_SYMBOLS" /></example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotificationEx(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.AnySymbolSpecifier,TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ValueNotification" /> objects.
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">The user data.</param>
            <returns>IObservable&lt;NotificationValue&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">symbols</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">symbols - Symbol list is empty!</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotificationEx(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.AnySymbolSpecifier},TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ValueNotification" /> objects.
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbols">The symbols.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">The user data.</param>
            <returns>IObservable&lt;NotificationValue&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">symbols</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">symbols - Symbol list is empty!</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbolCollection)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.Notification"/> objects.
            </summary>
            <param name="connection">The client.</param>
            <param name="symbols">The symbols.</param>
            <returns>IObservable&lt;NotificationValue&gt;.</returns>
            <example>
            The following sample shows how observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions"/>
            <code language="C#" title="Observe changing ADS Symbols with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_SYMBOLS" />
            </example>
            <seealso cref="M:TwinCAT.Ads.Reactive.AdsClientExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.NotificationSettings)"/>
        </member>
        <member name="T:TwinCAT.Ads.Reactive.SymbolValueNotification">
            <summary>
            Symbol Notification class
            </summary>
            <remarks>
            Extends the <see cref="T:TwinCAT.Ads.ValueNotification"/> class by symbol specific information.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.SymbolValueNotification.#ctor(TwinCAT.Ads.AdsNotificationEventArgs,TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.IAccessorValueFactory)">
            <summary>
            Initializes a new instance of the AdsStream class AdsSyncNotificationEventArgs.
            </summary>
            <param name="args">The <see cref="T:TwinCAT.Ads.AdsNotificationEventArgs" /> instance containing the event data.</param>
            <param name="symbol">The symbol.</param>
            <param name="valueFactory">The value factory.</param>
            <remarks>The TwinCAT realtime target system (even when working locally) has its own TimeSystem which is synchronized with
            the Desktop/User time at TwinCAT Start. From this moment on the Desktop/User time can drift from the local Realtime/Target time.
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Reactive.SymbolValueNotification._valueFactory">
            <summary>
            The internal value factory.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Reactive.SymbolValueNotification.Symbol">
            <summary>
            Gets the symbol of the <see cref="T:TwinCAT.Ads.Reactive.SymbolValueNotification"/>.
            </summary>
            <value>The value symbol.</value>
        </member>
        <member name="F:TwinCAT.Ads.Reactive.SymbolValueNotification._valCreated">
            <summary>
            Indicates that the Value is created.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.SymbolValueNotification.OnCreateValue">
            <summary>
            Called when the Value has to be created (from raw data).
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Reactive.AnyTypeExtensions">
            <summary>
            Extension class for <see cref="T:TwinCAT.Ads.IAdsConnection"/> to provide reactive ADS extensions (accessing symbol value sequences with the ANY_TYPE concept)
            </summary>
            <remarks>
            Reactive Extensions (Rx) are a library for composing asynchronous and event-based programs using observable sequences and LINQ-style
            query operators. Using Rx, developers represent asynchronous data streams with Observables, query asynchronous data streams using LINQ
            operators, and parameterize the concurrency in the asynchronous data streams using Schedulers. Simply put, Rx = Observables + LINQ + Schedulers.
            The ADS reactive extensions are build on top of this library to enable ADS Symbol and State Observables, seamlessly bound to the reactive
            extensions. To use the ADS reactive extensions the TwinCAT.Ads.Reactive Nuget package (or the included TwinCAT.Ads.Reactive.dll) must be referenced.
            (<a href="https://www.nuget.org/packages/Beckhoff.TwinCAT.Ads.Reactive/">Beckhoff.TwinCAT.Ads.Reactive package on Nuget</a>).
            </remarks>
            <example>
            Example1: Observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.AnyTypeExtensions"/>
            <code language="C#" title="Observe a single changing ADS Symbols (Extended AdsNotifications, ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_ANYTYPE" />
            </example>
            <example>
            Example2: Polling ANY_TYPE values.
            <code language="C#" title="Observe changing ADS Symbols by polling (Read Polling) (ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLANYTYPE" />
            </example>
            <example>
            Write values sequentially.
            <code language="C#" title="Write sequences of values to the target (ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_WRITEANYTYPE" />
            </example>
            <seealso cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions"/>
            <seealso cref="T:TwinCAT.Ads.Reactive.ValueSymbolExtensions"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,System.String[],System.Type[],TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Creates an observable sequence of values
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePaths">The instance paths.</param>
            <param name="types">The types.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <example>
            Observe multiple ANY_TYPES via reactive sequence.
            <code language="C#" title="Observe multiple ANY_TYPES  via reactive sequence." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_ANYTYPES" /></example>
            <remarks>The values will be cast to the specified type. The .NET type must fit the Symbol type like all ANYTYPES.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.WhenNotification``1(TwinCAT.Ads.IAdsConnection,System.String,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Creates an observable sequence of values that are created by ADS Notifications.
            </summary>
            <typeparam name="T">The .NET Type representation of the specified symbols type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="settings">The settings.</param>
            <returns>IObservable&lt;T&gt;.</returns>
            <remarks>The values will be cast to the specified type. The .NET type must fit the Symbol type like all ANYTYPES.</remarks>
            <example>
            The following sample shows how to observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.AnyTypeExtensions"/>
            <code language="C#" title="Observe changing ADS Symbols with reactive extensions (Extended AdsNotification, ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_ANYTYPE" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.WhenNotification(TwinCAT.Ads.IAdsConnection,System.String,System.Type,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Creates an observable sequence of values that are created by ADS Notifications.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="type">The type.</param>
            <param name="settings">The settings.</param>
            <returns>IObservable&lt;T&gt;.</returns>
            <remarks>The values will be cast to the specified type. The .NET type must fit be one of the compatible 'ANYTYPES'.</remarks>
            <example>
            The following sample shows how to observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.AnyTypeExtensions"/>
            <code language="C#" title="Observe changing ADS Symbols with reactive extensions (Extended AdsNotifications, ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_ANYTYPE" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.WriteValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.IObservable{``0},System.Action{System.Exception})">
            <summary>
            Writes the sequence of values to the symbol specified by the instance path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="valueSequence">Value sequence (Any type).</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IDisposable.</returns>
            <example>
            Write values sequentially.
            <code language="C#" title="Write sequences of values to the target (ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_WRITEANYTYPE" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.WriteValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.IObservable{``0})">
            <summary>
            Writes the sequence of values to the symbol specified by the instance path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="valueSequence">Value sequence (Any type).</param>
            <returns>IDisposable.</returns>
            <example>
            Write values sequentially.
            <code language="C#" title="Write sequences of values to the target (ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_WRITEANYTYPE" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,System.String,System.Type,System.Int32[],System.IObservable{System.Reactive.Unit},System.Func{System.Exception,System.Object})">
            <summary>
            Polls the symbol values on time points where the polling observable streams data / triggers
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="args">The ANY_TYPE arguments.</param>
            <param name="trigger">The Polling trigger</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues2``1(TwinCAT.Ads.IAdsConnection,System.String,System.Int32[],System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the symbol values on time points where the polling observable streams data / triggers
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="args">The ANY_TYPE arguments.</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">connection</exception>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Type,System.Int32[],System.IObservable{System.Reactive.Unit},System.Func{System.Exception,System.Object})">
            <summary>
            Polls the symbol values on time points where the polling observable streams data / triggers
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="args">The ANY_TYPE arguments.</param>
            <param name="trigger">The Polling trigger</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,System.String,System.Type,System.Int32[],System.TimeSpan,System.Func{System.Exception,System.Object})">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="args">The ANY_TYPE arguments.</param>
            <param name="period">The period.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Type,System.Int32[],System.TimeSpan,System.Func{System.Exception,System.Object})">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="args">The ANY_TYPE arguments.</param>
            <param name="period">The period.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,System.String,System.Type,System.Int32[],System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="args">The ANY_TYPE arguments.</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Type,System.Int32[],System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="args">The ANY_TYPE arguments.</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,System.String,System.Type,System.IObservable{System.Reactive.Unit},System.Func{System.Exception,System.Object})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="trigger">The Polling trigger</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Type,System.IObservable{System.Reactive.Unit},System.Func{System.Exception,System.Object})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="trigger">The Polling trigger</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,System.String,System.Type,System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Type,System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,System.String,System.Type,System.TimeSpan,System.Func{System.Exception,System.Object})">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="period">The period.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Type,System.TimeSpan,System.Func{System.Exception,System.Object})">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="period">The period.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,System.String,System.Type,System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Type,System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="type">The data type of the symbol (ANY_TYPE)</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.IObservable{System.Reactive.Unit},System.Func{System.Exception,``0})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="trigger">The Polling trigger</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.IObservable{System.Reactive.Unit},System.Func{System.Exception,``0})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The Polling trigger</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues2``1(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Int32[],System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="args">The arguments.</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.TimeSpan,System.Func{System.Exception,``0})">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="period">The period.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.TimeSpan,System.Func{System.Exception,``0})">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="period">The period.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.Int32[],System.IObservable{System.Reactive.Unit},System.Func{System.Exception,``0})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="args">ANY_TYPE arguments</param>
            <param name="trigger">The Polling trigger</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Int32[],System.IObservable{System.Reactive.Unit},System.Func{System.Exception,``0})">
            <summary>
            Polls the symbol values on timepoints where the polling observable streams data / triggers
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="symbol">The Symbol.</param>
            <param name="args">ANY_TYPE arguments</param>
            <param name="trigger">The Polling trigger</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.Int32[],System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the symbol values on time points where the polling observable streams data / triggers
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="args">ANY_TYPE arguments</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Int32[],System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the symbol values on time points where the polling observable streams data / triggers
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="args">ANY_TYPE arguments</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.Int32[],System.TimeSpan,System.Func{System.Exception,``0})">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="args">ANY_TYPE arguments.</param>
            <param name="period">The period.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <example>
            Polling ANY_TYPE values.
            <code language="C#" title="Observe changing ADS Symbols by polling (Read Polling) (ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLANYTYPE" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Int32[],System.TimeSpan,System.Func{System.Exception,``0})">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="symbol">The instance path.</param>
            <param name="args">ANY_TYPE arguments.</param>
            <param name="period">The period.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <example>
            Polling ANY_TYPE values.
            <code language="C#" title="Observe changing ADS Symbols by polling (Read Polling) (ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLANYTYPE" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,System.String,System.Int32[],System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="args">ANY_TYPE arguments.</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <example>
            Polling ANY_TYPE values.
            <code language="C#" title="Observe changing ADS Symbols by polling (Read Polling) (ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLANYTYPE" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.AnyTypeExtensions.PollValues``1(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol,System.Int32[],System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <typeparam name="T">The ANY_TYPE compatible .NET Type.</typeparam>
            <param name="connection">The connection.</param>
            <param name="symbol">The symbol.</param>
            <param name="args">ANY_TYPE arguments.</param>
            <param name="period">The period.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <example>
            Polling ANY_TYPE values.
            <code language="C#" title="Observe changing ADS Symbols by polling (Read Polling) (ANY_TYPE)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLANYTYPE" />
            </example>
        </member>
        <member name="T:TwinCAT.Ads.Reactive.ValueSymbolExtensions">
            <summary>
            Extension class for <see cref="T:TwinCAT.Ads.IAdsConnection"/> to provide reactive ADS extensions for accessing symbols that are loaded by the <see cref="T:TwinCAT.Ads.IAdsSymbolLoaderFactory"/>
            </summary>
            <remarks>
            Reactive Extensions (Rx) are a library for composing asynchronous and event-based programs using observable sequences and LINQ-style
            query operators. Using Rx, developers represent asynchronous data streams with Observables, query asynchronous data streams using LINQ
            operators, and parameterize the concurrency in the asynchronous data streams using Schedulers. Simply put, Rx = Observables + LINQ + Schedulers.
            The ADS reactive extensions are build on top of this library to enable ADS Symbol and State Observables, seamlessly bound to the reactive
            extensions. To use the ADS reactive extensions the TwinCAT.Ads.Reactive Nuget package (or the included TwinCAT.Ads.Reactive.dll) must be referenced from
            All types within are contained in the ADS companion package "Beckhoff.TwinCAT.Ads.Reactive" which must be referenced separately.
            (<a href="https://www.nuget.org/packages/Beckhoff.TwinCAT.Ads.Reactive/">Beckhoff.TwinCAT.Ads.Reactive package on Nuget</a>).
            </remarks>
            <example>
            The following sample shows how to observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.ValueSymbolExtensions"/> from an <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/>.
            <code language="C#" title="Observe a single changing ADS Symbol (ADS Notifications)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_READSYMBOL" />
            </example>
            <example>
            The following sample shows how to observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.ValueSymbolExtensions"/> from an <strong>DynamicSymbol</strong>.
            <code language="C#" title="Observe a single changing ADS Symbol (ADS Notifications) with the dynamic language runtime (.NET DLR)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_READSYMBOL" />
            </example>
            <example>
            The same for more than one <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/>.
            <code language="C#" title="Observe changing ADS Symbols (ADS Notifications)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_READSYMBOLS" />
            </example>
            <example>
            Here, the values are polled in a specific time period and sequential Reads are triggered (in opposite to ADS Notification in the latter example)
            <code language="C#" title="Observe changing ADS Symbols by polling (Read Polling)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSYMBOLS" />
            </example>
            <example>
            In the following example it is demonstrated how to write Values sequentially to a <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/> with the help of the reactive extensions.
            <code language="C#" title="Write sequences of values to the target" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_WRITESYMBOLS" />
            </example>   
            <example>
            Polling of values as SumCommands (reading of multiple symbols/values in one ADS roundtrip)
            <code language="C#" title="SumCommand polling (Symbols)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSUMCOMMAND2" />
            <code language="C#" title="SumCommand polling (via InstancePath)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSUMCOMMAND" />
            </example>   
            <seealso cref="T:TwinCAT.Ads.Reactive.AdsClientExtensions"/>
            <seealso cref="T:TwinCAT.Ads.Reactive.AnyTypeExtensions"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WhenValueChangedAnnotated(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.IValueSymbol)">
            <summary>
            Observable sequence of  Value changed events driven by ADS Notifications on the specified symbol.
            </summary>
            <param name="connection">The ADS connection / ADS Client</param>
            <param name="symbol">The symbol.</param>
            <returns>IObservable&lt;ValueChangedArgs&gt;.</returns>
            <seealso cref="T:System.Reactive.Linq.Observable"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WhenValueChangedAnnotated(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Observable sequence of  Value changed events driven by ADS Notifications on the specified symbol.
            </summary>
            <param name="connection">The ADS connection / ADS Client</param>
            <param name="symbols">The symbols to observe.</param>
            <returns>IObservable&lt;ValueChangedArgs&gt;.</returns>
            <seealso cref="T:System.Reactive.Linq.Observable"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WhenValueChanged(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Observable sequence of  Values driven by ADS Notifications on the specified symbol.
            </summary>
            <param name="connection">The ADS connection / ADS Client</param>
            <param name="symbols">The symbols to observe.</param>
            <returns>IObservable&lt;ValueChangedArgs&gt;.</returns>
            <seealso cref="T:System.Reactive.Linq.Observable"/>
            <example>
            The same for more than one <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/>.
            <code language="C#" title="Observe changing ADS Symbols (ADS Notifications)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_READSYMBOLS" />
            </example>
            <example>
            The following sample shows how to observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.ValueSymbolExtensions"/> from an <strong>DynamicSymbol</strong>.
            <code language="C#" title="Observe a single changing ADS Symbol (ADS Notifications) with the dynamic language runtime (.NET DLR)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_READSYMBOL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WhenValueChanged(TwinCAT.TypeSystem.IValueSymbol)">
            <summary>
            Gets an observable sequence when the value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/> has changed.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <example>
            The following sample shows how to observe Value changed Notifications with the reactive <see cref="T:TwinCAT.Ads.Reactive.ValueSymbolExtensions"/> from an <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/>.
            <code language="C#" title="Observe a single changing ADS Symbols (ADS Notifications)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_READSYMBOL" />
            </example>
            <see cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WhenValueChangedAnnotated(TwinCAT.TypeSystem.IValueSymbol)"/>
            <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WhenValueChangedAnnotated(TwinCAT.TypeSystem.IValueSymbol)">
            <summary>
            Gets an observable sequence when the value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/> has changed.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>IObservable&lt;ValueChangedArgs&gt;.</returns>
            <exclude/>
            <remarks>In addition to the sequence of the pure values (like in <see cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WhenValueChanged(TwinCAT.TypeSystem.IValueSymbol)"/>) the sequence contains
            <see cref="T:TwinCAT.TypeSystem.ValueChangedEventArgs"/> objects that contain additional notification timestamps.</remarks>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WhenValueChanged(TwinCAT.TypeSystem.IValueSymbol)"/>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WriteValues(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Object})">
            <summary>
            Subscribes the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> to an observable sequence of values and writes them to the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObservable">Observable of Values.</param>
            <returns>IDisposable.</returns>
            <example>
            In the following example it is demonstrated how to write Values sequentially to a <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/> with the help of the reactive extensions.
            <code language="C#" title="Write sequences of values to the target" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_WRITESYMBOLS" />
            </example>   
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WriteValues(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Object},System.Action{System.Exception})">
            <summary>
            Subscribes the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> to an observable sequence of values and writes them to the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObservable">Observable of Values.</param>
            <param name="errorHandler">The error handler or NULL.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WriteValues(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Object},System.Threading.CancellationToken)">
            <summary>
            Subscribes the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> to an observable sequence of values and writes them to the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObservable">Observable of Values.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.WriteValues(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Object},System.Action{System.Exception},System.Threading.CancellationToken)">
            <summary>
            Subscribes the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> to an observable sequence of values and writes them to the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObservable">Observable of Values.</param>
            <param name="errorHandler">The error handler.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})">
            <summary>
            Poll symbol values on trigger signals.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The polling trigger.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <remarks>If ReadRequest errors occur, the observable will be closed with and <see cref="T:TwinCAT.AdsException"/>./>
            </remarks>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues2(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})"/>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit},System.Boolean)">
            <summary>
            Polls symbol values on trigger signals.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The Polling trigger</param>
            <param name="ignoreErrors">if set to <c>true</c> ADS errors are ignored and a <b>NULL</b> value is returned.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <remarks>If <paramref name="ignoreErrors"/> is not set and ReadRequest errors occur, the observable will be closed with error./>
            If errors are ignored, the observable will return <strong>NULL</strong> values on erroneous requests.
            </remarks>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues2(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})"/>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})"/>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan,System.Boolean)"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit},System.Func{TwinCAT.ValueAccess.ResultReadValueAccess2{TwinCAT.TypeSystem.IValueSymbol,System.Object},``0})">
            <summary>
            Poll symbol values on trigger signals (typed)
            </summary>
            <typeparam name="T">The type of the values</typeparam>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The Polling trigger</param>
            <param name="errorHandler">The error handler</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})" />
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)" />
            <remarks>If an read error occurs an optional error handler will be called.
            This decides the return value. If no errorHandler is specified, an <see cref="T:TwinCAT.AdsException" /> is thrown on error.</remarks>
            <example>
            Example for polling typed values and usage of an error handler.
            <code language="C#" title="Observe changing ADS Symbols (Read Polling)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLERRORHANDLER" /></example>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit},System.Boolean)">
            <summary>
            Poll symbol values on trigger signals (typed)
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The Polling trigger</param>
            <param name="ignoreErrors">Ignore errors.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})" />
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)" />
            <remarks>If <paramref name="ignoreErrors" /> is not set and ReadRequest errors occur, the observable will be closed with error (<see cref="T:TwinCAT.AdsException" />)./&gt;
            If errors are ignored, the observable will return <strong>NULL</strong> values on erroneous requests.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})">
            <summary>
            Poll symbol values as a value sequence  on trigger signals (typed)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit},System.Boolean)" />
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)" />
            <remarks>Read errors will end the observable with <see cref="T:TwinCAT.AdsException" /> error.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan,System.Boolean)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="period">The period.</param>
            <param name="ignoreErrors">Ignore errors (NULL values will be returned)</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <remarks>If <paramref name="ignoreErrors" /> is not set and ReadRequest errors occur, the observable will be closed with error (<see cref="T:TwinCAT.AdsException" />)./&gt;
            If errors are ignored, the observable will return <strong>NULL</strong> values on erroneous requests.</remarks>
            <example>
            Here, the values are polled in a specific time period and sequential Reads are triggered (in opposite to ADS Notification in the latter example)
            <code language="C#" title="Observe changing ADS Symbols (Read Polling)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSYMBOLS" /></example>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit},System.Boolean)" />
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan,System.Boolean)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time (typed)
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="period">The period.</param>
            <param name="ignoreErrors">Ignore read errors (default values will be returned).</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
            <remarks>If <paramref name="ignoreErrors" /> is not set and ReadRequest errors occur, the observable will be closed with error (<see cref="T:TwinCAT.AdsException" />)./&gt;
            If errors are ignored, the observable will return <strong>NULL</strong> values on erroneous requests.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="period">The period.</param>
            <example>
            Here, the values are polled in a specific time period and sequential Reads are triggered (in opposite to ADS Notification in the latter example)
            <code language="C#" title="Observe changing ADS Symbols (Read Polling)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSYMBOLS" />
            </example>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues``1(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)">
            <summary>
            Polls the symbol as value sequence of object values with a specified period time (typed)
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="period">The time period.</param>
            <example>
            Here, the values are polled in a specific time period and sequential Reads are triggered (in opposite to ADS Notification in the latter example)
            <code language="C#" title="Observe changing ADS Symbols (Read Polling)" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSYMBOLS" />
            </example>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues2(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})">
            <summary>
            Poll symbol values as a sequence of annotated results (Value + ErrorCode)
            </summary>
            <param name="symbol">The symbol to poll</param>
            <param name="trigger">The Polling trigger</param>
            <returns>IObservable&lt;ResultReadValueAccess&gt;.</returns>
            <remarks>This reactive method polls the symbol version together with additional information. The distinct result data
            is <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> which contains the value (if succeeded) together with the communication return code. If the ErrorCode is > 0, then the Value property will return the
            default value.
            This has the advantage, that the Observable doesn't produces Errors when communication requests return Errors and the Observer can continue.
            Internally for optimization reasons because it is expected that the polling occurs many times, this reactive method creates the symbol handle before the first polling trigger (one roundtrip),
            reads the value with each trigger and unregisters the handle on finalize.
            So the number of communication roundtrips are Triggers + 2.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues2(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)">
            <summary>
            Poll symbol values with communication return codes.
            </summary>
            <param name="symbol">The symbol to poll.</param>
            <param name="period">The polling interval.</param>
            <returns>IObservable&lt;ResultReadValueAccess&gt;.</returns>
            <remarks>This reactive method polls the symbol version together with additional information. The distinct result data
            is <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> which contains the value (if succeeded) together with the communication return code. If the ErrorCode is > 0, then the Value property will return the
            default value.
            This has the advantage, that the Observable doesn't produces Errors when communication requests return Errors and the Observer can continue.
            Internally for optimization reasons because it is expected that the polling occurs many times, this reactive method creates the symbol handle before the first polling trigger (one roundtrip),
            reads the value with each trigger and unregisters the handle on finalize.
            So the number of communication roundtrips is Trigggers + 2.
            </remarks>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)"/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.Ads.SumCommand.ISumRead,System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls a series of symbols via a <see cref="T:TwinCAT.Ads.SumCommand.ISumRead" /> command. The SumCommand will read all contained values with every trigger.
            </summary>
            <param name="sumRead">The SumRead command.</param>
            <param name="trigger">The Polling trigger.</param>
            <example>
            Demonstration of polling values efficiently via SumRead command.
            <code language="C#" title="Observe multiple ADS Symbols via Polling of SumCommand" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSUMCOMMAND" />
            </example>
            <returns>IObservable&lt;ResultSumValues&gt;.</returns>
            <remarks>The characteristic of this overload is that more than one values can be read with one trigger signal. Each trigger produces only one
            Read call to the SumRead. Dependent on the configuration of the SumRead this could mean only one ADS Roundtrip (Request/Response).
            So the advantages are:
            <list type="bullet"><item>Usage of one trigger (could be a Background thread resource) for all values</item><item>Getting the values of all values in one ADS roundtrip</item><item>Values inside the SumRead are more consistant dependant of target realtime task configuration.</item></list></remarks>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumRead"/>
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues2(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="F:TwinCAT.Ads.Reactive.ValueSymbolExtensions.s_asyncPoll">
            <summary>
            Async polling is unfortunate, because the AmsRequests are send somehow parallized when the triggering is very fast and
            the observer blocks too long. This could lead to misordering the responses (SET TO FALSE!!!)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues2``1(TwinCAT.Ads.SumCommand.ISumRead2{``0},System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls a series of symbols via a <see cref="T:TwinCAT.Ads.SumCommand.ISumRead2`1" /> command. The SumCommand will read all contained values with every trigger in one roundtrip.
            </summary>
            <typeparam name="S">The source specifier, this could be an ISymbol or InstancePath (string) for example to reference the single values with their source.</typeparam>
            <param name="sumRead">The SumRead command.</param>
            <param name="trigger">The Polling trigger.</param>
            <returns>IObservable&lt;ResultSumValues&gt;.</returns>
            <example>
            Demonstration of polling values efficiently via SumRead command.
            <code language="C#" title="Observe multiple ADS Symbols via Polling of SumCommand" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSUMCOMMAND2" /></example>
            <remarks>The characteristic of this overload is that more than one values can be read with one trigger signal. Each trigger produces only one
            Read call to the SumRead. Dependent on the configuration of the SumRead this could mean only one ADS Roundtrip (Request/Response).
            So the advantages are:
            <list type="bullet"><item>Usage of one trigger (could be a Background thread resource) for all values</item><item>Getting the values of all values in one ADS roundtrip</item><item>Values inside the SumRead are more consistant dependant of target realtime task configuration.</item></list></remarks>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumRead2`1" />
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.Ads.SumCommand.ISumRead,System.IObservable{System.Reactive.Unit})" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.Ads.SumCommand.ISumRead,System.TimeSpan)">
            <summary>
            Polls a series of symbols via a <see cref="T:TwinCAT.Ads.SumCommand.ISumRead2`1" /> command. The SumCommand will read all contained values with every trigger in one roundtrip.
            </summary>
            <param name="sumRead">The SumRead command.</param>
            <param name="period">The time period for polling values.</param>
            <returns>IObservable&lt;ResultSumValues&gt;.</returns>
            <example>
            Demonstration of polling values efficiently via SumRead command.
            <code language="C#" title="Observe multiple ADS Symbols via Polling of SumCommand" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSUMCOMMAND" /></example>
            <remarks>The characteristic of this overload is that more than one values can be read with one trigger signal. Each trigger produces only one
            Read call to the SumRead. Dependent on the configuration of the SumRead this could mean only one ADS Roundtrip (Request/Response).
            So the advantages are:
            <list type="bullet"><item>Usage of one trigger (could be a Background thread resource) for all values</item><item>Getting the values of all values in one ADS roundtrip</item><item>Values inside the SumRead are more consistant dependant of target realtime task configuration.</item></list></remarks>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumRead" />
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues2``1(TwinCAT.Ads.SumCommand.ISumRead2{``0},System.TimeSpan)" />
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues2``1(TwinCAT.Ads.SumCommand.ISumRead2{``0},System.TimeSpan)">
            <summary>
            Polls a series of symbols via a <see cref="T:TwinCAT.Ads.SumCommand.ISumRead2`1" /> command. The SumCommand will read all contained values with every trigger.
            </summary>
            <typeparam name="S">The source specifier, this could be an ISymbol or an InstancePath for example to reference the symbol.</typeparam>
            <param name="sumRead">The SumRead command.</param>
            <param name="period">The time period for polling values.</param>
            <returns>IObservable&lt;ResultSumValues&gt;.</returns>
            <example>
            Demonstration of polling values efficiently via SumRead command.
            <code language="C#" title="Observe multiple ADS Symbols via Polling of SumCommand" source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_POLLSUMCOMMAND2" /></example>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumRead" />
            <seealso cref="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValues(TwinCAT.Ads.SumCommand.ISumRead,System.TimeSpan)" />
            The result object <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues2`1" /> contains enriched result values, that are referencing back to the associated <see cref="T:TwinCAT.TypeSystem.ISymbol" />.
            <remarks>The characteristic of this overload is that more than one values can be read with one trigger signal. Each trigger produces only one
            Read call to the SumRead. Dependent on the configuration of the SumRead this could mean only one ADS Roundtrip (Request/Response).
            So the advantages are:
            <list type="bullet"><item>Usage of one trigger (could be a Background thread resource) for all values</item><item>Getting the values of all values in one ADS roundtrip</item><item>Values inside the SumRead are more consistant dependant of target realtime task configuration.</item></list></remarks>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValuesAnnotated(TwinCAT.TypeSystem.IValueSymbol,System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the values as <see cref="T:TwinCAT.TypeSystem.ValueChangedEventArgs"/> sequence annotated value on trigger sequence
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The polling Trigger.</param>
            <returns>IObservable&lt;ValueChangedArgs&gt;.</returns>
            <remarks>If ReadRequest errors occur, the observable will be closed with error./>
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.ValueSymbolExtensions.PollValuesAnnotated(TwinCAT.TypeSystem.IValueSymbol,System.TimeSpan)">
            <summary>
            Polls the values as <see cref="T:TwinCAT.TypeSystem.ValueChangedEventArgs"/> sequence with a specified period time.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="period">The polling period/interval.</param>
            <returns>IObservable&lt;ValueChangedArgs&gt;.</returns>
            <remarks>If ReadRequest errors occur, the observable will be closed with error./>
            </remarks>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.Reactive.TimerObservable">
            <summary>
            Class TimerObservable. Implementation of a Timer Observable, where the Interval can be changed on the fly.
            </summary>
            <seealso cref="T:System.IObservable`1" />
            <seealso cref="T:System.IDisposable" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.TimerObservable.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Reactive.TimerObservable"/> class.
            </summary>
            <param name="interval">The initial interval in ms.</param>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.TimerObservable.Start">
            <summary>
            Starts the Observer
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.TimerObservable.Stop">
            <summary>
            Stops the Observer
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Reactive.TimerObservable.IsStarted">
            <summary>
            Indictes that the <see cref="T:TwinCAT.Ads.Reactive.TimerObservable"/> has been started.
            </summary>
            <value><c>true</c> if this instance is started; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Reactive.TimerObservable.Interval">
            <summary>
            Gets or sets the interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.TimerObservable.Elapsed(System.Object)">
            <summary>
            Timer elapsed handler
            </summary>
            <param name="stateInfo">The state information.</param>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.TimerObservable.Subscribe(System.IObserver{System.Reactive.Unit})">
            <summary>
            Notifies the provider that an observer is to receive notifications.
            </summary>
            <param name="observer">The object that is to receive notifications.</param>
            <returns>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.TimerObservable.Complete">
            <summary>
            Completes the Observable
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.TimerObservable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:TwinCAT.Ads.Reactive.TimerObservable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Reactive.Unsubscriber`1">
            <summary>
            Unsubscription object for the TimerObservable
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <typeparam name="Unit">The type of the unit.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:TwinCAT.Ads.Vision.ImageFormat">
            <summary>
            Enum ImageExportFormat
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Vision.ImageFormat.Bmp">
            <summary>
            Format Bitmap
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Vision.ImageFormat.Tiff">
            <summary>
            Format TIFF
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Vision.ResultBitmapSize">
            <summary>
            ADS Result value for Bitmap Sizes
            Implements the <see cref="T:TwinCAT.Ads.ResultAds" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.ResultAds" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Vision.ResultBitmapSize.#ctor(TwinCAT.Ads.AdsErrorCode,System.Drawing.Size,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Vision.ResultBitmapSize" /> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="bitmapSize">The Bitmap size.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:TwinCAT.Ads.Vision.ResultBitmapSize.#ctor(TwinCAT.Ads.AdsErrorCode,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Vision.ResultBitmapSize"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="P:TwinCAT.Ads.Vision.ResultBitmapSize.BitmapSize">
            <summary>
            Gets the Bitmap size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:TwinCAT.Ads.Vision.ResultBitmapSize.Bytes">
            <summary>
            Gets the size of the image in bytes.
            </summary>
            <value>The bytes.</value>
        </member>
        <member name="M:TwinCAT.Ads.Vision.ResultBitmapSize.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an error Result object.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultBitmapSize.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Vision.ResultBitmap">
            <summary>
            Ads Read Result for Bitmaps.
            Implements the <see cref="T:TwinCAT.Ads.ResultAds" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.ResultAds" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Vision.ResultBitmap.#ctor(TwinCAT.Ads.AdsErrorCode,System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Vision.ResultBitmap" /> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="bitmap">The bitmap.</param>
            <param name="bitmapSize">Size of the bitmap.</param>
        </member>
        <member name="P:TwinCAT.Ads.Vision.ResultBitmap.Data">
            <summary>
            Gets Bitmap Data
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:TwinCAT.Ads.Vision.ResultBitmap.BitmapSize">
            <summary>
            Gets the bitmap Size
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:TwinCAT.Ads.Vision.ResultBitmap.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an error return object.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultBitmap.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Vision.ResultBitmapHandles">
            <summary>
            Class ResultBitmapHandles.
            Implements the <see cref="T:TwinCAT.Ads.ResultAds" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.ResultAds" />
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.Vision.ResultBitmapHandles.GetSizeHandle">
            <summary>
            Gets the variable handle of the GetSize method.
            </summary>
            <value>The get size handle.</value>
        </member>
        <member name="P:TwinCAT.Ads.Vision.ResultBitmapHandles.GetBitmapHandle">
            <summary>
            Gets variable handle fo the GetBitmap method.
            </summary>
            <value>The get bitmap handle.</value>
        </member>
        <member name="M:TwinCAT.Ads.Vision.ResultBitmapHandles.#ctor(TwinCAT.Ads.AdsErrorCode,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Vision.ResultBitmapHandles"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="getSizeHandle">The get size handle.</param>
            <param name="getBitmapHandle">The get bitmap handle.</param>
        </member>
        <member name="T:TwinCAT.Ads.Vision.VisionExtension">
            <summary>
            Class VisionExtension.
            </summary>
            <example>
            The following sample shows how <see cref="T:TwinCAT.Ads.Vision.VisionExtension">Vision extensions</see> simplify the code to access TwinCAT Vision Images from the PLC. The Bitmaps are
            accessed On-Request (Simple Read), via polling and notification observers.
            <code language="C#" title="Use Session (async)" source="..\..\Samples\Sample.Ads.Vision\Program.cs" region="CODE_SAMPLE" />
            </example>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.GetImageSymbolsAsync(TwinCAT.ISession,System.Threading.CancellationToken)">
            <summary>
            Gets Symbols that represent an Vision image from the target device.
            </summary>
            <param name="session">The session.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;IEnumerable`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.GetImageSymbols(TwinCAT.ISession)">
            <summary>
            Gets Symbols that represent an Vision image from the target device.
            </summary>
            <param name="session">The session.</param>
            <returns>IEnumerable&lt;ISymbol&gt;.</returns>
            <exception cref="T:System.ArgumentException">adsSession</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.GetImageSymbolsAsync(TwinCAT.IConnection,System.Threading.CancellationToken)">
            <summary>
            Gets Symbols that represent an Vision image from the target device.
            </summary>
            <param name="connection">The connection.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IEnumerable&lt;ISymbol&gt;&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.GetImageSymbols(TwinCAT.IConnection)">
            <summary>
            Gets Symbols that represent an Vision image from the target device.
            </summary>
            <param name="connection">The connection.</param>
            <returns>Task&lt;IEnumerable&lt;ISymbol&gt;&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.WhereImage(System.Collections.Generic.ICollection{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Searches recursively for Vision image symbols in the collection.
            </summary>
            <param name="coll">The coll.</param>
            <returns>IEnumerable&lt;ISymbol&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.IsVisionImage(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Indicates, that the symbol is a Vision Image/Bitmap
            </summary>
            <param name="symbol">The s.</param>
            <returns><c>true</c> if [is vision image] [the specified s]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImageSizeAsync(TwinCAT.Ads.IAdsConnection,System.UInt32,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Gets the Image Size information from the target.
            </summary>
            <param name="connection">The connection.</param>
            <param name="handleGetSize">The handle of the GetSize method.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultBitmapSize&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImageSize(TwinCAT.Ads.IAdsConnection,System.UInt32,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size)">
            <summary>
            Gets the Image Size information from the target.
            </summary>
            <param name="connection">The connection.</param>
            <param name="handleGetSize">The handle of the GetSize method.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <returns>ResultBitmapSize</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.EnsureConnection(TwinCAT.IConnection)">
            <summary>
            Ensures the connection is useable
            </summary>
            <param name="connection">The connection.</param>
            <exception cref="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">Wrong Connection type!</exception>
            <exception cref="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.EnsureVisionImage(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.IAdsConnection@,TwinCAT.TypeSystem.IValueSymbol@)">
            <summary>
            Ensures that the symbol is an Vision image,
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="connection">The connection.</param>
            <param name="valueSymbol">The value symbol.</param>
            <exception cref="T:System.ArgumentException">Is not a Vision Image! - symbol</exception>
            <exception cref="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">Wrong Connection type!</exception>
            <exception cref="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.EnsureValidBitmapSize(System.Drawing.Size)">
            <summary>
            Ensures that the BitmapSize is valid (Width and Height &gt;= 0)
            </summary>
            <param name="bitmapSize">Size of the bitmap.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">bitmapSize</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImageAsync(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Reads the image from the target device.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired Size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultBitmap&gt; representing the asynchronous operation.</returns>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Wrong Connection type!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImageAsync(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Reads the image from the target device.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultBitmap&gt; representing the asynchronous operation.</returns>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Wrong Connection type!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImageAsync(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Reads the image from the target device.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The Instance path to the Vision image/bitmap.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired siz of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultBitmap&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImageAsync(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Reads the image from the target device.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The Instance path to the Vision image/bitmap.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultBitmap&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImage(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size)">
            <summary>
            Reads the image from the target device.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <returns>ResultBitmap.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImage(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat)">
            <summary>
            Reads the image from the target device.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <returns>ResultBitmap.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImage(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size)">
            <summary>
            Reads the image from the target device.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The Instance path to the Vision image/bitmap.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty for original image size). Currently only supported for Bmp format.</param>
            <returns>ResultBitmap.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImage(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat)">
            <summary>
            Reads the image from the target device.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The Instance path to the Vision image/bitmap.</param>
            <param name="format">The format.</param>
            <returns>ResultBitmap.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.UnregisterImageHandlesAsync(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.Vision.ResultBitmapHandles,System.Threading.CancellationToken)">
            <summary>
            Unregisters the image handles as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="resultHandles">The result handles.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultAds&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.UnregisterImageHandles(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.Vision.ResultBitmapHandles)">
            <summary>
            Unregisters the image handles as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="resultHandles">The result handles.</param>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.RegisterImageHandlesAsync(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Register image handles as an asynchronous operation.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultBitmapHandles&gt; representing the asynchronous operation.</returns>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Wrong Connection type!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Not connected exception!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Unsupported export format</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.RegisterImageHandles(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat)">
            <summary>
            Register image handles as an asynchronous operation.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Wrong Connection type!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Not connected exception!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Unsupported export format</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.RegisterImageHandles(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat)">
            <summary>
            Register image handles as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="format">The format.</param>
            <returns>ResultBitmapHandles.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImageAsync(TwinCAT.Ads.IAdsConnection,System.UInt32,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Reads the vision image as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="handleGetImage">The handle of the GetBitmap method.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The bitmap Size.</param>
            <param name="bytes">The bytes.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultBitmap&gt; representing the asynchronous operation.</returns>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Wrong Connection type!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.ReadImage(TwinCAT.Ads.IAdsConnection,System.UInt32,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Int64)">
            <summary>
            Reads the vision image as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="handleGetImage">The handle of the GetBitmap method.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">Size of the bitmap.</param>
            <param name="bytes">The bytes.</param>
            <returns>ResultBitmap.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.RegisterImageNotifications(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.UInt32,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Registers an ADS Notification for an Vision Image symbol
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <returns>ResultHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.RegisterImageNotifications(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.UInt32,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Registers an ADS Notification for an Vision Image symbol
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <returns>ResultHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.RegisterImageNotificationsAsync(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Threading.CancellationToken)">
            <summary>
            Registers an ADS Notification for an Vision Image symbol
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultHandle&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.RegisterImageNotificationsAsync(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Threading.CancellationToken)">
            <summary>
            Registers an ADS Notification for an Vision Image symbol
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultHandle&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.UnregisterImageNotificationsAsync(TwinCAT.IConnection,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Unregisters the image notification asynchronous.
            </summary>
            <param name="connection">The connection.</param>
            <param name="handle">The handle.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ResultAds&gt;.</returns>
            <exception cref="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">Wrong Connection type!</exception>
            <exception cref="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.UnregisterImageNotifications(TwinCAT.IConnection,System.UInt32)">
            <summary>
            Unregisters the image notification.
            </summary>
            <param name="connection">The connection.</param>
            <param name="handle">The handle.</param>
            <returns>ResultAds.</returns>
            <exception cref="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">Wrong Connection type!</exception>
            <exception cref="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImageAsync(TwinCAT.TypeSystem.ISymbol,System.TimeSpan,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images with a specified polling rate.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empyt/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImageAsync(TwinCAT.TypeSystem.ISymbol,System.TimeSpan,TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images with a specified polling rate.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImageAsync(TwinCAT.IConnection,System.String,System.TimeSpan,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images with a specified polling rate.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImageAsync(TwinCAT.IConnection,System.String,System.TimeSpan,TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images with a specified polling rate.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImage(TwinCAT.TypeSystem.ISymbol,System.TimeSpan,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images with a specified polling rate.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImage(TwinCAT.TypeSystem.ISymbol,System.TimeSpan,TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images with a specified polling rate.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImage(TwinCAT.IConnection,System.String,System.TimeSpan,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images with a specified polling rate.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImage(TwinCAT.IConnection,System.String,System.TimeSpan,TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images with a specified polling rate.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImageAsync(TwinCAT.TypeSystem.ISymbol,System.IObservable{System.Reactive.Unit},TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images triggered by another observable.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The trigger.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Wrong Connection type!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImageAsync(TwinCAT.TypeSystem.ISymbol,System.IObservable{System.Reactive.Unit},TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images triggered by another observable.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The trigger.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Wrong Connection type!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImageAsync(TwinCAT.IConnection,System.String,System.IObservable{System.Reactive.Unit},TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images triggered by another observable.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="trigger">The trigger.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImageAsync(TwinCAT.IConnection,System.String,System.IObservable{System.Reactive.Unit},TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images triggered by another observable.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="trigger">The trigger.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImage(TwinCAT.TypeSystem.ISymbol,System.IObservable{System.Reactive.Unit},TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images triggered by another observable.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The trigger.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Wrong Connection type!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImage(TwinCAT.TypeSystem.ISymbol,System.IObservable{System.Reactive.Unit},TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images triggered by another observable.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="trigger">The trigger.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Wrong Connection type!</exception>
            <exception cref="F:TwinCAT.Ads.AdsState.Exception">Not connected exception!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImage(TwinCAT.IConnection,System.String,System.IObservable{System.Reactive.Unit},TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images triggered by another observable.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="trigger">The trigger.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired siye of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.PollImage(TwinCAT.IConnection,System.String,System.IObservable{System.Reactive.Unit},TwinCAT.Ads.Vision.ImageFormat,System.Threading.CancellationToken)">
            <summary>
            Creates a polling observable for vision images triggered by another observable.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="trigger">The trigger.</param>
            <param name="format">The format.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.WhenImageNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.UInt32,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Gets an Observable of Image Notifications
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.WhenImageNotification(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.UInt32,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Gets an Observable of Image Notifications
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.WhenImageNotificationAsync(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Threading.CancellationToken)">
            <summary>
            Gets an Observable of Image Notifications
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.WhenImageNotificationAsync(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.Vision.ImageFormat,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Threading.CancellationToken)">
            <summary>
            Gets an Observable of Image Notifications
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="format">The format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.WhenImageNotificationAsync(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat,System.Drawing.Size,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Threading.CancellationToken)">
            <summary>
            Gets an Observable of Image Notifications (Registered / Unregistered) asynchronously
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="format">The format.</param>
            <param name="bitmapSize">The desired size of the exported image (set to Size.Empty/0,0 for original image size). Currently only supported for Bmp format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.VisionExtension.WhenImageNotificationAsync(TwinCAT.IConnection,System.String,TwinCAT.Ads.Vision.ImageFormat,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Threading.CancellationToken)">
            <summary>
            Gets an Observable of Image Notifications (Registered / Unregistered) asynchronously
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePath">The instance path.</param>
            <param name="format">The format.</param>
            <param name="maxSize">The maximum size (in byte) of the exported image. Can be estimated: width * height * channels * dataTypeSize + 2048 (for headers).</param>
            <param name="settings">The settings.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultBitmap&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Vision.TiffDecoder">
            <summary>
            A generic Tiff Decoder exists e.g. in System.Windows.Media.Imaging, but this might not be available on all platforms and has some overhead.
            As decoding our own exported tiff files is pretty simple and avoids an external dependency, this custom implementation is used instead.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Vision.ImageMarshaler.ReadSize(TwinCAT.Ads.Vision.ImageFormat,System.Int64)">
            <summary>
            Gets the number of bytes necessary for read marshaling
            </summary>
            <param name="format">The format.</param>
            <param name="bitmapSize">Bitmap size in Bytes</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Vision.ImageMarshaler.WriteSize(TwinCAT.Ads.Vision.ImageFormat)">
            <summary>
            Gets the number of bytes that will be marshaled by the Write Buffer.
            </summary>
            <returns>System.Int32.</returns>
        </member>
    </members>
</doc>
