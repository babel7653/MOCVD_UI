<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSVFile</name>
    </assembly>
    <members>
        <member name="T:CSVFile.CSV">
            <summary>
            Root class that contains static functions for straightforward CSV parsing
            </summary>
        </member>
        <member name="F:CSVFile.CSV.VERSION">
            <summary>
            Use this to determine what version of DotNet was used to build this library
            </summary>
        </member>
        <member name="M:CSVFile.CSV.ParseStream(System.IO.StreamReader,CSVFile.CSVSettings)">
            <summary>
            Parse a CSV stream into <![CDATA[ IEnumerable<string[]> ]]>, while permitting embedded newlines
            </summary>
            <param name="inStream">The stream to read</param>
            <param name="settings">The CSV settings to use for this parsing operation (Default: CSV)</param>
            <returns>An enumerable object that can be examined to retrieve rows from the stream.</returns>
        </member>
        <member name="M:CSVFile.CSV.ParseLine(System.String,CSVFile.CSVSettings,System.Nullable{System.Boolean})">
            <summary>
            Parse a line from a CSV file and return an array of fields, or null if it fails
            </summary>
            <param name="line">One line of text from a CSV file</param>
            <param name="settings">The CSV settings to use for this parsing operation (Default: CSV)</param>
            <param name="throwOnFailure">If this value is true, throws an exception if parsing fails</param>
            <returns>An array containing all fields in the next row of data, or null if it could not be parsed.</returns>
        </member>
        <member name="M:CSVFile.CSV.TryParseLine(System.String,System.String[]@,CSVFile.CSVSettings)">
             <summary>
             Try to parse a line of CSV data.  Can only return false if an unterminated text qualifier is encountered.
            
             This function cannot recognize 'sep=' lines because it does not know whether it is parsing the first line
             in the overall CSV stream.
             </summary>
             <returns>False if there was an unterminated text qualifier in the <paramref name="line"/></returns>
             <param name="line">The line of text to parse</param>
             <param name="settings">The CSV settings to use for this parsing operation (Default: CSV)</param>
             <param name="row">The array of fields found in the line</param>
        </member>
        <member name="M:CSVFile.CSV.Deserialize``1(System.String,CSVFile.CSVSettings)">
            <summary>
            Deserialize a CSV string into a list of typed objects
            </summary>
            <typeparam name="T">The type of objects to deserialize</typeparam>
            <param name="settings">The CSV settings to use when parsing the source (Default: CSV)</param>
            <param name="source">The source CSV to deserialize</param>
            <returns></returns>
        </member>
        <member name="M:CSVFile.CSV.ToCSVString(System.Collections.Generic.IEnumerable{System.Object},CSVFile.CSVSettings)">
            <summary>
            Serialize a sequence of objects into a CSV string
            </summary>
            <returns>A single line of CSV encoded data containing these values</returns>
            <param name="row">A list or array of objects to serialize</param>
            <param name="settings">The field delimiter character (Default: comma)</param>
        </member>
        <member name="M:CSVFile.CSV.Serialize``1(System.Collections.Generic.IEnumerable{``0},CSVFile.CSVSettings)">
            <summary>
            Serialize an array of objects to CSV format
            </summary>
            <typeparam name="T">The type of objects to serialize from this CSV</typeparam>
            <param name="list">The array of objects to serialize</param>
            <param name="settings">The CSV settings to use when exporting this array (Default: CSV)</param>
            <returns>The completed CSV string representing one line per element in list</returns>
        </member>
        <member name="M:CSVFile.CSV.Serialize``1(System.Collections.Generic.IEnumerable{``0},System.IO.Stream,CSVFile.CSVSettings)">
            <summary>
            Serialize an array of objects to CSV format
            </summary>
            <typeparam name="T">The type of objects to serialize from this CSV</typeparam>
            <param name="list">The array of objects to serialize</param>
            <param name="stream">The stream to which we will send this CSV text</param>
            <param name="settings">The CSV settings to use when exporting this array (Default: CSV)</param>
            <returns>The completed CSV string representing one line per element in list</returns>
        </member>
        <member name="M:CSVFile.CSV.SerializeAsync``1(System.Collections.Generic.IEnumerable{``0},System.IO.Stream,CSVFile.CSVSettings)">
            <summary>
            Serialize an array of objects to CSV format
            </summary>
            <typeparam name="T">The type of objects to serialize from this CSV</typeparam>
            <param name="list">The array of objects to serialize</param>
            <param name="stream">The stream to which we will send this CSV text</param>
            <param name="settings">The CSV settings to use when exporting this array (Default: CSV)</param>
            <returns>The completed CSV string representing one line per element in list</returns>
        </member>
        <member name="M:CSVFile.CSV.AppendCSVHeader``1(System.Text.StringBuilder,CSVFile.CSVSettings)">
            <summary>
            Add a CSV Header line to a StringBuilder for a specific type
            </summary>
            <param name="sb">The StringBuilder to append data</param>
            <param name="settings">The CSV settings to use when exporting this array (Default: CSV)</param>
        </member>
        <member name="M:CSVFile.CSV.AppendCSVLine``1(System.Text.StringBuilder,``0,CSVFile.CSVSettings)">
            <summary>
            Appends a single object to a StringBuilder in CSV format as a single line
            </summary>
            <param name="sb">The StringBuilder to append data</param>
            <param name="obj">The single object to append in CSV-line format</param>
            <param name="settings">The CSV settings to use when exporting this array (Default: CSV)</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:CSVFile.CSV.ItemsToCsv(System.Collections.Generic.IEnumerable{System.Object},CSVFile.CSVSettings,System.Char[],System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Internal method to convert a list of things into a CSV line using the specified settings object
            
            This function assumes:
             * That the list of items is not null, but it may contain nulls
             * That settings is not null
             * That RiskyChars and ForceQualifierTypes have been set up correctly to match the CSV settings
            </summary>
            <param name="items"></param>
            <param name="settings"></param>
            <param name="riskyChars"></param>
            <param name="forceQualifierTypes"></param>
            <returns></returns>
        </member>
        <member name="M:CSVFile.CSV.ParseSepLine(System.String)">
            <summary>
            Parse a separator line and determine
            </summary>
            <param name="line"></param>
            <returns>The separator</returns>
        </member>
        <member name="T:CSVFile.CSVDataTable">
            <summary>
            Code to assist in working with DataTable objects and CSV sources
            </summary>
        </member>
        <member name="M:CSVFile.CSVDataTable.FromFile(System.String,CSVFile.CSVSettings)">
            <summary>
            Read in a single CSV file into a datatable in memory
            </summary>
            <param name="filename"></param>
            <param name="settings">The CSV settings to use when exporting this array (Default: CSV)</param>
            <returns>An data table of strings that were retrieved from the CSV file.</returns>
        </member>
        <member name="M:CSVFile.CSVDataTable.FromStream(System.IO.StreamReader,CSVFile.CSVSettings)">
            <summary>
            Read in a single CSV file into a datatable in memory
            </summary>
            <param name="stream">The stream source from which to load the datatable.</param>
            <param name="settings">The CSV settings to use when exporting this array (Default: CSV)</param>
            <returns>An data table of strings that were retrieved from the CSV file.</returns>
        </member>
        <member name="M:CSVFile.CSVDataTable.FromString(System.String,CSVFile.CSVSettings)">
            <summary>
            Convert a CSV file (in string form) into a data table
            </summary>
            <param name="source"></param>
            <param name="settings">The CSV settings to use when exporting this array (Default: CSV)</param>
            <returns></returns>
        </member>
        <member name="M:CSVFile.CSVDataTable.WriteToFile(System.Data.DataTable,System.String,CSVFile.CSVSettings)">
            <summary>
            Write a data table to disk at the designated file name in CSV format
            </summary>
            <param name="dt"></param>
            <param name="filename"></param>
            <param name="settings">The CSV settings to use when exporting this DataTable (Default: CSV)</param>
        </member>
        <member name="M:CSVFile.CSVDataTable.WriteToStream(System.Data.DataTable,System.IO.StreamWriter,CSVFile.CSVSettings)">
            <summary>
            Write the data table to a stream in CSV format
            </summary>
            <param name="dt">The data table to write</param>
            <param name="sw">The stream where the CSV text will be written</param>
            <param name="settings">The CSV settings to use when exporting this DataTable (Default: CSV)</param>
        </member>
        <member name="M:CSVFile.CSVDataTable.WriteToString(System.Data.DataTable,CSVFile.CSVSettings)">
            <summary>
            Write a DataTable to a string in CSV format
            </summary>
            <param name="dt">The datatable to write</param>
            <param name="settings">The CSV settings to use when exporting this DataTable (Default: CSV)</param>
            <returns>The CSV string representing the object array.</returns>
        </member>
        <member name="T:CSVFile.ExcludedColumnHelper">
            <summary>
            Keeps track of which columns are excluded from CSV serialization / deserialization
            </summary>
        </member>
        <member name="F:CSVFile.ExcludedColumnHelper._excluded">
            <summary>
            Note that Dot Net Framework 2.0 does not support HashSet, but it does support Dictionary.
            </summary>
        </member>
        <member name="M:CSVFile.ExcludedColumnHelper.#ctor(CSVFile.CSVSettings)">
            <summary>
            Construct a helper object to track which columns are excluded from serialization
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:CSVFile.ExcludedColumnHelper.IsExcluded(System.String)">
            <summary>
            True if this column should be excluded
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:CSVFile.DeserializationHelper`1">
            <summary>
            A helper object to deserialize a class based on CSV strings
            </summary>
        </member>
        <member name="M:CSVFile.DeserializationHelper`1.#ctor(CSVFile.CSVSettings,System.String[])">
            <summary>
            Construct a new deserialization helper for a specific class containing all the information necessary
            for optimized deserialization
            </summary>
            <param name="settings"></param>
            <param name="headers"></param>
        </member>
        <member name="M:CSVFile.DeserializationHelper`1.Deserialize(System.String[],System.Int32,CSVFile.CSVSettings)">
            <summary>
            Deserialize a single row using precomputed converters
            </summary>
            <param name="line"></param>
            <param name="row_num"></param>
            <param name="settings"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:CSVFile.CSVReader">
            <summary>
            A reader that reads from a stream and emits CSV records
            </summary>
        </member>
        <member name="P:CSVFile.CSVReader.Settings">
            <summary>
            The settings currently in use by this reader
            </summary>
        </member>
        <member name="P:CSVFile.CSVReader.Headers">
            <summary>
            If the first row in the file is a header row, this will be populated
            </summary>
        </member>
        <member name="M:CSVFile.CSVReader.FromString(System.String,CSVFile.CSVSettings)">
            <summary>
            Convenience function to read from a string
            </summary>
            <param name="source">The string to read</param>
            <param name="settings">The CSV settings to use for this reader (Default: CSV)</param>
            <returns></returns>
        </member>
        <member name="M:CSVFile.CSVReader.FromFile(System.String,CSVFile.CSVSettings,System.Text.Encoding)">
            <summary>
            Convenience function to read from a file on disk
            </summary>
            <param name="filename">The file to read</param>
            <param name="settings">The CSV settings to use for this reader (Default: CSV)</param>
            <param name="encoding">The string encoding to use for the reader (Default: UTF8)</param>
            <returns></returns>
        </member>
        <member name="M:CSVFile.CSVReader.#ctor(System.IO.StreamReader,CSVFile.CSVSettings)">
            <summary>
            Construct a new CSV reader off a streamed source
            </summary>
            <param name="source">The stream source. Note that when disposed, the CSV Reader will dispose the stream reader.</param>
            <param name="settings">The CSV settings to use for this reader (Default: CSV)</param>
        </member>
        <member name="M:CSVFile.CSVReader.#ctor(System.IO.Stream,CSVFile.CSVSettings)">
            <summary>
            Construct a new CSV reader off a streamed source
            </summary>
            <param name="source">The stream source. Note that when disposed, the CSV Reader will dispose the stream reader.</param>
            <param name="settings">The CSV settings to use for this reader (Default: CSV)</param>
        </member>
        <member name="M:CSVFile.CSVReader.Lines">
            <summary>
            Iterate through all lines in this CSV file
            </summary>
            <returns>An array of all data columns in the line</returns>
        </member>
        <member name="M:CSVFile.CSVReader.GetEnumerator">
            <summary>
            Iterate through all lines in this CSV file
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSVFile.CSVReader.ReadAsDataTable">
            <summary>
            Read this file into a data table in memory
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSVFile.CSVReader.Deserialize``1">
            <summary>
            Deserialize the CSV reader into a generic list
            </summary>
            <typeparam name="T">The type to deserialize</typeparam>
            <returns>A streaming collection of objects as they are read from the source</returns>
            <exception cref="T:System.Exception">If the CSV formatting does not match the object, throw errors</exception>
        </member>
        <member name="M:CSVFile.CSVReader.Dispose">
            <summary>
            Close our resources - specifically, the stream reader
            </summary>
        </member>
        <member name="M:CSVFile.CSVReader.ChopFile(System.String,System.String,System.Int32,CSVFile.CSVSettings)">
            <summary>
            Take a CSV file and chop it into multiple chunks of a specified maximum size.
            </summary>
            <param name="filename">The input filename to chop</param>
            <param name="out_folder">The folder where the chopped CSV will be saved</param>
            <param name="maxLinesPerFile">The maximum number of lines to put into each file</param>
            <param name="settings">The CSV settings to use when chopping this file into chunks (Default: CSV)</param>
            <returns>Number of files chopped</returns>
        </member>
        <member name="T:CSVFile.CSVState">
            <summary>
            The current state of CSV processing, given the text that has been seen so far
            </summary>
        </member>
        <member name="F:CSVFile.CSVState.Done">
            <summary>
            We have reached the end of the CSV and everything is done
            </summary>
        </member>
        <member name="F:CSVFile.CSVState.CanKeepGoing">
            <summary>
            We don't need more text at the moment
            </summary>
        </member>
        <member name="F:CSVFile.CSVState.MissingTrailingQualifier">
            <summary>
            The CSV reached the end, but there was a missing (unpaired) text qualifier.
            For example:
                `1,2,3,"test`
            </summary>
        </member>
        <member name="T:CSVFile.CSVStateMachine">
             <summary>
             This state machine handles all functions of CSV processing except for the I/O, which can come in a variety
             of forms, either from a stream or an in-memory collection.
            
             Since some CSV files have a single row of data that comprises multiple lines, this state machine may or may
             not produce one row of data for each chunk of text received.
             </summary>
        </member>
        <member name="P:CSVFile.CSVStateMachine.State">
            <summary>
            Whether the state machine has concluded or can continue processing
            </summary>
        </member>
        <member name="M:CSVFile.CSVStateMachine.NeedsMoreText">
            <summary>
            Returns true if we need more text
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSVFile.CSVStateMachine.#ctor(CSVFile.CSVSettings)">
            <summary>
            Constructs a new state machine to begin processing CSV text
            </summary>
        </member>
        <member name="M:CSVFile.CSVStateMachine.ParseChunk(System.String,System.Boolean)">
             <summary>
             Parse a new chunk of text retrieved via some other means than a stream.
            
             Call this function when you are retrieving your own text and when each chunk may or may not
             include line separators, and your stream does not consume line separators on its own.
             </summary>
             <param name="chunk">The new data to process</param>
             <param name="reachedEnd">Set this value to true </param>
             <returns>If this parsing operation produces a valid row, this will be non-null</returns>
        </member>
        <member name="T:CSVFile.SerializationHelper`1">
            <summary>
            Helper object that implements serialization separately from the string or stream I/O
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CSVFile.SerializationHelper`1.#ctor(CSVFile.CSVSettings,System.Char[],System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Constructs a serialization helper object separate from I/O
            </summary>
            <param name="settings"></param>
            <param name="riskyChars"></param>
            <param name="forceQualifierTypes"></param>
        </member>
        <member name="M:CSVFile.SerializationHelper`1.SerializeHeader">
            <summary>
            Serialize the header for the CSV file
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSVFile.SerializationHelper`1.Serialize(`0)">
            <summary>
            Serialize a single row for the CSV file
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:CSVFile.CSVWriter">
            <summary>
            Writes CSV objects to a stream
            </summary>
        </member>
        <member name="M:CSVFile.CSVWriter.#ctor(System.IO.StreamWriter,CSVFile.CSVSettings)">
            <summary>
            Construct a new CSV writer to produce output on the enclosed StreamWriter
            </summary>
            <param name="dest">The stream where this CSV will be outputted</param>
            <param name="settings">The CSV settings to use when writing to the stream (Default: CSV)</param>
        </member>
        <member name="M:CSVFile.CSVWriter.#ctor(System.IO.Stream,CSVFile.CSVSettings)">
            <summary>
            Construct a new CSV writer to produce output on the enclosed stream
            </summary>
            <param name="dest">The stream where this CSV will be outputted</param>
            <param name="settings">The CSV settings to use when writing to the stream (Default: CSV)</param>
        </member>
        <member name="M:CSVFile.CSVWriter.Write(System.Data.DataTable)">
            <summary>
            Write the data table to a stream in CSV format
            </summary>
            <param name="dt">The data table to write</param>
        </member>
        <member name="M:CSVFile.CSVWriter.WriteLine(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Write a single line to this CSV
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:CSVFile.CSVWriter.WriteLineAsync(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Write a single line to this CSV
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:CSVFile.CSVWriter.WriteAsync(System.Data.DataTable)">
            <summary>
            Write the data table to a stream in CSV format
            </summary>
            <param name="dt">The data table to write</param>
        </member>
        <member name="M:CSVFile.CSVWriter.Serialize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serialize a list of objects to CSV using this writer
            </summary>
            <param name="list">An IEnumerable that produces the list of objects to serialize.</param>
        </member>
        <member name="M:CSVFile.CSVWriter.SerializeAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serialize a list of objects to CSV using this writer
            </summary>
            <param name="list">An IEnumerable that produces the list of objects to serialize.</param>
        </member>
        <member name="M:CSVFile.CSVWriter.Dispose">
            <summary>
            Close our resources - specifically, the stream reader
            </summary>
        </member>
        <member name="T:CSVFile.CSVSettings">
            <summary>
            Settings to configure how a CSV file is parsed
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.FieldDelimiter">
            <summary>
            The character used to delimit individual fields in the CSV.
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.TextQualifier">
            <summary>
            The character used to enclose fields that contain the delimiter character.
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.LineSeparator">
            <summary>
            The separator used to indicate the end of a line in the CSV file.
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.ForceQualifiers">
            <summary>
            Set this value to true to enclose all fields in the text qualifier character.
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.AllowNull">
             <summary>
             Set this value to true to allow nulls to be rendered in CSV files when serializing
             and deserializing.
              
             CSV files by default do not have a mechanism for differentiating between null fields
             and empty fields.  If this field is set to false, both `null` and empty string will
             render as an empty string.
            
             If this field is set to true, all non-null fields will be enclosed by the text qualifier,
             and fields that are null will be represented as `NullToken`.
             </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.NullToken">
            <summary>
            If AllowNull is set to true, this token will be used to represent NULL values.
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.HeaderRowIncluded">
            <summary>
            The first line of the CSV file will include the names of each field.
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.AllowSepLine">
             <summary>
             When reading a CSV file, if the first line contains the instruction `sep=`, use this
             to determine the separator for the file.
            
             The "sep" line is a feature exclusive to Microsoft Excel, which permits CSV files to
             more easily handle European files where the comma character is often a separator between
             numeric values rather than a field delimiter.
            
             If this flag is set to true, when you parse a CSV, the first line of the parsing can override
             the field separator logic for each individual instance of parsing, but it will not change
             the `FieldDelimiter` in your settings object.
            
             More information:
             * [Original Issue Report](https://github.com/tspence/csharp-csv-reader/issues/28)
             * [Superuser Article](https://superuser.com/questions/773644/what-is-the-sep-metadata-you-can-add-to-csvs)
             * [Tjitjing Blog](https://blog.tjitjing.com/index.php/2016/07/set-separator-delimiter-in-csv-file-to-open-correctly-in-excel.html)
             </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.AssumedHeaders">
            <summary>
            If `HeaderRowIncluded` is false, use these values for the headers
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.IgnoreDimensionErrors">
            <summary>
            Set this value to true to allow parsing for files where each row has a different number of fields
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.IgnoreHeaderErrors">
            <summary>
            Set this value to true to ignore header errors when deserializing
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.IgnoreReadOnlyProperties">
            <summary>
            Set this flag to true to ignore read-only properties during serialization
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.HeadersCaseSensitive">
            <summary>
            Expect headers to be case sensitive during deserialization
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.ExcludedColumns">
            <summary>
            Exclude these columns during serialization and deserialization
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.ForceQualifierTypes">
            <summary>
            A list of data types that require text qualifiers during serialization.
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.IgnoreEmptyLineForDeserialization">
            <summary>
            Some CSV files contain an empty line at the end. If you set this flag to true, deserialization will
            not throw an error for empty lines and will instead ignore it.
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.BufferSize">
            <summary>
            When reading data from a stream, this is the block size to read at once.
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.Encoding">
            <summary>
            The encoding for converting streams of bytes to strings
            </summary>
        </member>
        <member name="P:CSVFile.CSVSettings.DateTimeFormat">
            <summary>
            The format to use for serializing date time objects, by default, ISO 8601
            </summary>
        </member>
        <member name="F:CSVFile.CSVSettings.CSV">
            <summary>
            Standard comma-separated value (CSV) file settings
            </summary>
        </member>
        <member name="F:CSVFile.CSVSettings.CSV_PERMIT_NULL">
            <summary>
            Standard comma-separated value (CSV) file settings that permit rendering of NULL values
            </summary>
        </member>
        <member name="F:CSVFile.CSVSettings.TSV">
            <summary>
            Standard tab-separated value (TSV) file settings
            </summary>
        </member>
        <member name="M:CSVFile.CSVSettings.CloneWithNewDelimiter(System.Char)">
            <summary>
            Clone the existing settings, but with a different field delimiter.
            
            Used for parsing of "sep=" lines so that the original object is immutable.
            </summary>
            <param name="newDelimiter">The new delimiter for the cloned settings</param>
            <returns>The newly cloned settings with the updated delimiter</returns>
        </member>
        <member name="M:CSVFile.CSVSettings.GetRiskyChars">
            <summary>
            Retrieve the list of risky characters according to this settings definition
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSVFile.CSVSettings.GetForceQualifierTypes">
            <summary>
            Retrieve a hashset containing the list of types that require text qualifiers, or null if this
            feature is not used in this settings definition
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
    </members>
</doc>
