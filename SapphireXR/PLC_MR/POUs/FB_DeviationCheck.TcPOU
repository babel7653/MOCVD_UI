<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="FB_DeviationCheck" Id="{8c7477eb-6bd1-44a7-8478-0fc84a7a7e4d}" SpecialFunc="None">
    <Declaration><![CDATA[//*********************************************************************
// Function Block: FB_DeviationCheck
// Description: 각 디바이스의 편차 초과 알람을 처리합니다.
// bEnable이 TRUE일 때만 알람 로직이 활성화됩니다.
//*********************************************************************
FUNCTION_BLOCK FB_DeviationCheck
VAR_INPUT
	bAlarmEnable	: BOOL; // 디바이스 활성화/비활성화 (TRUE = 활성화)
	bWarningEnable	: BOOL;
	fCurrentValue 	: REAL; //현재값
	fControlValue 	: REAL; //제어값
	fMaxValue		: REAL; //최대값
	fAlarmTreshold	: REAL; // 알람 편차 허용 임계값
	fWarningTreshold : REAL; // 경고 편차 허용 임계값
	tAlarmDelay		: TIME; //알람 지연 시간
END_VAR
VAR_OUTPUT
	bDeviationAlarm		: BOOL; //편차 알람 발생
	bDeviationWarning 	: BOOL; //편차 경고 발생
	fDeviationAlarm		: REAL; // 현재 편차(참고용)
	fDeviationWarning	: REAL; 
END_VAR
VAR
	// 내부 변수 (인스턴스별로 독립적)
	fbDeviationAlarmTimer 		: TON;
	fbDeviationWarningTimer 	: TON; 
	bDeviationAlarmCondition 	: BOOL;
	bDeviationWarningCondition 	: BOOL; 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// bAlarmEnable이 TRUE일 때만 알람 로직 실행
IF bAlarmEnable AND (fMaxValue <> 0) THEN
	fDeviationAlarm :=ABS(fCurrentValue - fControlValue)/fMaxValue * 100; //편차 계산(%)
	//편차 알람 로직(지연 시간 적용)
	IF fDeviationAlarm > fAlarmTreshold THEN
		bDeviationAlarmCondition := TRUE;
	ELSE
		bDeviationAlarmCondition := FALSE;
	END_IF
	fbDeviationAlarmTimer(IN:=bDeviationAlarmCondition, PT:=tAlarmDelay);
	bDeviationAlarm := fbDeviationAlarmTimer.Q;
ELSE
	// bEnable이 FALSE일 경우, 모든 알람 및 타이머를 비활성화/리셋
    // Q 출력을 FALSE로 강제하고, IN 입력을 FALSE로 설정하여 타이머를 리셋합니다.
	bDeviationAlarm := FALSE;
	fbDeviationAlarmTimer(IN := FALSE, PT := tAlarmDelay); // 타이머 리셋
	bDeviationAlarmCondition := FALSE; // 조건 플래그도 리셋
	fDeviationAlarm := 0.0; // 편차 값도 0으로 초기화 (선택 사항)
END_IF

// bWarningEnable이 TRUE일 때만 알람 로직 실행
IF bWarningEnable AND (fMaxValue <> 0) THEN
	//편차 계산(%)
	fDeviationWarning :=ABS(fCurrentValue - fControlValue)/fMaxValue * 100;
	//편차 알람 로직(지연 시간 적용)
	IF (fDeviationWarning > fWarningTreshold) AND (fDeviationWarning <= fAlarmTreshold) THEN
		bDeviationWarningCondition := TRUE;
	ELSE
		bDeviationWarningCondition := FALSE;
	END_IF
	fbDeviationWarningTimer(IN:=bDeviationWarningCondition, PT:=tAlarmDelay);
	bDeviationWarning := fbDeviationWarningTimer.Q;
ELSE
	// bEnable이 FALSE일 경우, 모든 알람 및 타이머를 비활성화/리셋
    // Q 출력을 FALSE로 강제하고, IN 입력을 FALSE로 설정하여 타이머를 리셋합니다.
	bDeviationWarning := FALSE;
	fbDeviationWarningTimer(IN := FALSE, PT := tAlarmDelay); // 타이머 리셋
	bDeviationWarningCondition := FALSE; // 조건 플래그도 리셋
	fDeviationWarning := 0.0; // 편차 값도 0으로 초기화 (선택 사항)
END_IF]]></ST>
    </Implementation>
    <LineIds Name="FB_DeviationCheck">
      <LineId Id="1" Count="39" />
    </LineIds>
  </POU>
</TcPlcObject>