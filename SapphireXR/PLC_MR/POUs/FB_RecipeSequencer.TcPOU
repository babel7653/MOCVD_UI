<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="FB_RecipeSequencer" Id="{eaa1ede0-1851-426e-9c35-61099dc6c976}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_RecipeSequencer
VAR_INPUT
	nRcpIndex	: INT;
END_VAR

VAR
	i 			: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Write a Controller MFC / EPC *)
FOR i:= 1 TO 26 DO
	IF GVL_IO.aMaxValueController[i] <> 0 THEN
		GVL_IO.aController[i].nState := 10;
		GVL_IO.aController[i].nRampTime := RCP.aRecipe[nRcpIndex].iRecipe[2]; //Current Recipe Step Ramp Time
		GVL_IO.aController[i].rTargetValue := RCP.aRecipe[nRcpIndex].rRecipe[i] / GVL_IO.aMaxValueController[i] * GVL_IO.KL3464MaxValueH; //Input Set Value
		GVL_IO.aAnalogOutputIO[i] := LREAL_TO_INT(GVL_IO.aController[i].rControlValue);
		
		GVL_IO.aController_PV[i] := GVL_IO.aAnalogInputIO[i] / (GVL_IO.KL3464MaxValueH * GVL_IO.aMaxValueController[i]);
		GVL_IO.aController_CV[i] := LREAL_TO_REAL((GVL_IO.aController[i].rControlValue / GVL_IO.KL3464MaxValueH)*GVL_IO.aMaxValueController[i]);
		GVL_IO.aController[i]();	
	END_IF
END_FOR

(* Reactor Susceptor Temperature *)
GVL_IO.aController[27].nState := 10; //START
IF ( GVL_IO.aController_CV[27] > 10 ) THEN
	GVL_IO.aDigitalOutputIO[2].0 := TRUE;
ELSE
	GVL_IO.aDigitalOutputIO[2].0 := FALSE;
END_IF

GVL_IO.aController[27].nRampTime := RCP.aRecipe[nRcpIndex].iRecipe[2];
GVL_IO.aController[27].rTargetValue := RCP.aRecipe[nRcpIndex].iRecipe[4];
GVL_IO.wE3508_CV := LREAL_TO_WORD(GVL_IO.aController[27].rControlValue); //Write to Temperature Controller
GVL_IO.aController_PV[27] := WORD_TO_REAL(GVL_IO.wE3508_PV);
GVL_IO.aController_CV[27] := WORD_TO_REAL(GVL_IO.wE3508_CV);
GVL_IO.aController[27]();

(* Reactor Pressure Control *)
GVL_IO.aController[28].nState := 10; //START
GVL_IO.aController[28].nRampTime := RCP.aRecipe[nRcpIndex].iRecipe[2];
GVL_IO.aController[28].rTargetValue := RCP.aRecipe[nRcpIndex].iRecipe[5];
GVL_IO.wIqPlus_CV := LREAL_TO_WORD(GVL_IO.aController[28].rControlValue); //Write to Pressure Controller

GVL_IO.aController_PV[28] := WORD_TO_REAL(GVL_IO.wIqPlus_CDG2_PV);
GVL_IO.aController_CV[28] := WORD_TO_REAL(GVL_IO.wIqPlus_CV);
GVL_IO.aController[28]();

(* Suceptor Rotation Control *)
GVL_IO.aController[29].nState := 10; //START
GVL_IO.aController[29].nRampTime := RCP.aRecipe[nRcpIndex].iRecipe[2];
GVL_IO.aController[29].rTargetValue := RCP.aRecipe[nRcpIndex].iRecipe[6];
GVL_IO.rRotation_ControlValue := LREAL_TO_REAL(GVL_IO.aController[29].rControlValue); //Write to Rotation Controller (rpm)

GVL_IO.aController_PV[29] := GVL_IO.nRotation_Converted_PV;
GVL_IO.aController_CV[29] := GVL_IO.rRotation_ControlValue;
GVL_IO.aController[29]();		

(* Solenoid Valve Mapping *)
GVL_IO.aOutputSolValve[1].0 := RCP.aRecipe[nRcpIndex].dRecipe.0; //V01 Hyd. Carrier
GVL_IO.aOutputSolValve[1].1 := RCP.aRecipe[nRcpIndex].dRecipe.1; //V02
GVL_IO.aOutputSolValve[1].2 := RCP.aRecipe[nRcpIndex].dRecipe.2; //V03
GVL_IO.aOutputSolValve[1].3 := RCP.aRecipe[nRcpIndex].dRecipe.3; //V04
GVL_IO.aOutputSolValve[1].4 := RCP.aRecipe[nRcpIndex].dRecipe.4; //V05
GVL_IO.aOutputSolValve[1].6 := RCP.aRecipe[nRcpIndex].dRecipe.5; //V07
GVL_IO.aOutputSolValve[1].7 := RCP.aRecipe[nRcpIndex].dRecipe.6; //V08
GVL_IO.aOutputSolValve[1].9 := RCP.aRecipe[nRcpIndex].dRecipe.7; //V10
GVL_IO.aOutputSolValve[1].10 := RCP.aRecipe[nRcpIndex].dRecipe.8; //V11
GVL_IO.aOutputSolValve[1].12 := RCP.aRecipe[nRcpIndex].dRecipe.9; //V13
GVL_IO.aOutputSolValve[1].13 := RCP.aRecipe[nRcpIndex].dRecipe.10; //V14
GVL_IO.aOutputSolValve[1].15 := RCP.aRecipe[nRcpIndex].dRecipe.11; //V16
GVL_IO.aOutputSolValve[2].0 := RCP.aRecipe[nRcpIndex].dRecipe.12; //V17
GVL_IO.aOutputSolValve[2].2 := RCP.aRecipe[nRcpIndex].dRecipe.13; //V19
GVL_IO.aOutputSolValve[2].3 := RCP.aRecipe[nRcpIndex].dRecipe.14; //V20
GVL_IO.aOutputSolValve[2].5 := RCP.aRecipe[nRcpIndex].dRecipe.15; //V22
GVL_IO.aOutputSolValve[2].6 := RCP.aRecipe[nRcpIndex].dRecipe.16; //V23
GVL_IO.aOutputSolValve[2].7 := RCP.aRecipe[nRcpIndex].dRecipe.17; //V24
GVL_IO.aOutputSolValve[2].8 := RCP.aRecipe[nRcpIndex].dRecipe.18; //V25
GVL_IO.aOutputSolValve[2].9 := RCP.aRecipe[nRcpIndex].dRecipe.19; //V26
GVL_IO.aOutputSolValve[2].10 := RCP.aRecipe[nRcpIndex].dRecipe.20; //V27
GVL_IO.aOutputSolValve[2].11 := RCP.aRecipe[nRcpIndex].dRecipe.21; //V28
GVL_IO.aOutputSolValve[2].12 := RCP.aRecipe[nRcpIndex].dRecipe.22; //V29
GVL_IO.aOutputSolValve[2].13 := RCP.aRecipe[nRcpIndex].dRecipe.23; //V30
GVL_IO.aOutputSolValve[2].14 := RCP.aRecipe[nRcpIndex].dRecipe.24; //V31
GVL_IO.aOutputSolValve[2].15 := RCP.aRecipe[nRcpIndex].dRecipe.25; //V32]]></ST>
    </Implementation>
    <LineIds Name="FB_RecipeSequencer">
      <LineId Id="30" Count="4" />
      <LineId Id="129" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="296" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="264" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="250" Count="8" />
      <LineId Id="260" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="269" Count="6" />
      <LineId Id="263" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="283" Count="6" />
      <LineId Id="279" Count="0" />
      <LineId Id="132" Count="26" />
      <LineId Id="131" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>