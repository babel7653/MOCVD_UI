<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="P14_ThermalBath" Id="{2c2b0e51-5635-46ea-83dc-d55165a0b5b4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P14_ThermalBath
VAR_INPUT
	rTemperatureSV 		: ARRAY[1..6]OF REAL;
END_VAR
VAR_OUTPUT
	(* Input from Device *)
	bTempDeviationAlarm	: ARRAY[1..6] OF BOOL;
	bCutOffAlarm		: ARRAY[1..6] OF BOOL;
	
	rTemperaturePV 		: ARRAY[1..6]OF REAL;
	isBath_Err 			: ARRAY[1..6]OF BOOL;
	isBath_TC_Broken 	: ARRAY[1..6]OF BOOL ; 
END_VAR
VAR
	//for send variable
	TimeOnDelay	: TON; //Time delay after Power ON of Thermal Bath
	TimeCycle			: TON;
	TimeWaitSend		: TON;
	TimeWaitReceive		: TON;
	bSendingEnable 		: BOOL:=TRUE; // Check the Sending Stage
	bSetValueMode 		: BOOL;
	rTemperatureTV 		: ARRAY[1..6]OF REAL;
	fbSend				: SendString;
	sSendString 		: STRING;
	bSendBusy			: BOOL;
	bSendingOK 			: BOOL;
	eSendErrorID		: ComError_t;

	// for received variable
	fbReceive			: ReceiveString;
	sReceivedString		: STRING;
	bStringReceived		: BOOL;
	bReceiveBusy		: BOOL;
	bReceiveError		: BOOL;
	eReceiveErrorID		: ComError_t;
	bReceiveTimeout		: BOOL;
	bReceivedOK 		: BOOL;
	
	nBathNumber 		: INT := 1;
	sBathNumber 		: STRING := '1';
	sReceivedBathNumber : STRING;
	nReceivedBathNumber : INT;
	sReceivedAffirmation : STRING;
	sReceivedData 		: STRING;
	
	(* Input *)
	bThermalBathCB		: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Call the send block every second to repeat the transmission.
// Also call the block as long as it is busy to finish a transmission.
//TB: Thermal Bath x 6EA
//Maker: SMC
//Model: HEBC002-WA10
//Temp Range: -15 ~60℃
//RS485: 9600, DataBit(8), Parity(None), StopBit(1)
//BCC Check X

(* Read from Power Distribution Pannel *)
bThermalBathCB := GVL_IO.aDigitalInputIO[5].0;

(* Read from SMC Bath Device Value *)
TimeOnDelay(IN:= P90_Interlock.bThermalBathMC, PT :=T#10S); //Time Delay after a Thermal Bath MC ON
bTempDeviationAlarm[1]	:= GVL_IO.aDigitalInputIO[8].0;
bTempDeviationAlarm[2]	:= GVL_IO.aDigitalInputIO[8].2;
bTempDeviationAlarm[3]	:= GVL_IO.aDigitalInputIO[8].4;
bTempDeviationAlarm[4]	:= GVL_IO.aDigitalInputIO[8].6;
bTempDeviationAlarm[5]	:= GVL_IO.aDigitalInputIO[9].0;
bTempDeviationAlarm[6]	:= GVL_IO.aDigitalInputIO[9].2;
bCutOffAlarm[1] := NOT(GVL_IO.aDigitalInputIO[8].1); //Normally Contact
bCutOffAlarm[2] := NOT(GVL_IO.aDigitalInputIO[8].3);
bCutOffAlarm[3] := NOT(GVL_IO.aDigitalInputIO[8].5);
bCutOffAlarm[4] := NOT(GVL_IO.aDigitalInputIO[8].7);
bCutOffAlarm[5] := NOT(GVL_IO.aDigitalInputIO[9].1);
bCutOffAlarm[6] := NOT(GVL_IO.aDigitalInputIO[9].3);

// make a sending string
TimeCycle(IN := TimeOnDelay.Q, PT := T#1S); //Cycle for Serial Communication
IF TimeCycle.Q = TRUE THEN
	TimeCycle(IN := FALSE);

	// Make a sending string Set value or Request value 
	IF bSendingEnable = TRUE THEN
		//Set sate
		bSendingEnable := FALSE;
		bReceivedOK := FALSE;
		bSetValueMode := FALSE;
		
		//Target value(Bath) Set value
		IF (rTemperatureTV[nBathNumber] <> rTemperatureSV[nBathNumber])  OR isBath_Err[nBathNumber] THEN
			rTemperatureTV[nBathNumber] := rTemperatureSV[nBathNumber];
			sSendString := Real_To_String_ThermalBath(rTemperatureTV[nBathNumber],nBathNumber); //Send a SetValue=10.0 '$0201WSV100100$03'
			bSetValueMode := TRUE;
		ELSE
			sBathNumber := INT_TO_STRING(nBathNumber);
			sSendString := INSERT('$020RPV1$03',sBathNumber,2); //Request a PV
			bSetValueMode := FALSE;
		END_IF
		
		// Send string	
		fbSend(	SendString:= sSendString,
			TXbuffer:= TxBufferTB,
			Busy=> bSendBusy,
			Error=> );
		IF fbSend.Error <> COMERROR_NOERROR THEN
			eSendErrorID := fbSend.Error;
			bSendingOK := FALSE;
		ELSE
			eSendErrorID := COMERROR_NOERROR;
			bSendingOK := TRUE;
		END_IF
		
	END_IF

	//	Receive string data:
	//	The block receives any data strings beginning with a STX ($02) and ending with an ETX ($03) character.
	TimeWaitReceive(IN := bSendingOK, PT := T#250MS); //Wait receiving data
	IF TimeWaitReceive.Q THEN
		TimeWaitReceive(IN:= FALSE);
		fbReceive(
			Prefix:= '$02',
			Suffix:= '$03',
			Timeout:= T#1S,
			ReceivedString:= sReceivedString,
			RXbuffer:= RxBufferTB,
			StringReceived=> bStringReceived,
			Busy=> bReceiveBusy,
			Error=> ,
			RxTimeout=> bReceiveTimeout );
			
		IF bReceiveTimeout THEN
			isBath_Err[nReceivedBathNumber] := TRUE;
			bReceiveTimeout := FALSE;
		END_IF
		
		IF fbReceive.Error <> COMERROR_NOERROR THEN
			eReceiveErrorID := fbReceive.Error;
		END_IF
		
		IF bStringReceived THEN
			bStringReceived :=FALSE;
			bReceivedOK := TRUE;
			bSendingEnable := TRUE;
			sReceivedBathNumber := MID(STR:=sReceivedString, len:=1, pos:=3); //ReceivedString : '$0201$06PV100250$03'
			nReceivedBathNumber := STRING_TO_INT(sReceivedBathNumber);
			sReceivedAffirmation := MID(STR:=sReceivedString, len:=1, pos:=4); //Affirmation
			
			IF bSetValueMode THEN //Write SV Mode
				IF sReceivedAffirmation = '$06' THEN //'$06' ReceivedString : '$0201$06$03'
					isBath_Err[nReceivedBathNumber] := FALSE;
				ELSE
					//isBath_Err[nReceivedBathNumber] := TRUE;
				END_IF
				bSetValueMode := FALSE;
			ELSE //Read PV Mode
				sReceivedData := MID(STR:=sReceivedString, len:=5, pos:=8); //ReceivedString : '$0201$06PV100250$03'
				IF sReceivedData = '' THEN
					//isBath_Err[nReceivedBathNumber] := TRUE;
				ELSIF sReceivedData = 'HHHHH' THEN
					rTemperaturePV[nReceivedBathNumber] := -99.0;
					isBath_TC_Broken[nReceivedBathNumber] := TRUE;
					isBath_Err[nReceivedBathNumber] := FALSE;
				ELSE
					rTemperaturePV[nReceivedBathNumber] := (STRING_TO_REAL(sReceivedData))/10;
					isBath_TC_Broken[nReceivedBathNumber] := FALSE;
					isBath_Err[nReceivedBathNumber] := FALSE;
				END_IF
			END_IF
		END_IF
	END_IF
	
	//Change the Next Bath
	nBathNumber := nBathNumber + 1;
	IF nBathNumber > 6 THEN
		nBathNumber := 1;
	END_IF
	bSendingEnable := TRUE;
END_IF

]]></ST>
    </Implementation>
    <LineIds Name="P14_ThermalBath">
      <LineId Id="45" Count="7" />
      <LineId Id="203" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="254" Count="10" />
      <LineId Id="204" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="59" Count="98" />
      <LineId Id="5" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="201" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>