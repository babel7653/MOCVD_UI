<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="P30_ManualControl" Id="{98ee4f4f-99e9-426e-9dfa-55ddf51d552b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P30_ManualControl
VAR_INPUT
	state_Control	: INT; // 10:EnableControl
END_VAR
VAR
	i 	: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (Rcp.state_RcpOperation <> 10) THEN
	FOR i:=1 TO 26 DO
	IF GVL_IO.aMaxValueController[i] <> 0 THEN
		GVL_IO.aController[i].nState := state_Control;
		GVL_IO.aController[i].nRampTime := GVL_IO.aController_RampTime[i];
		GVL_IO.aController[i].rTargetValue := GVL_IO.aController_TV[i] / GVL_IO.aMaxValueController[i] * GVL_IO.KL3464MaxValueH; //Input Set Value
		GVL_IO.aAnalogOutputIO[i] := LREAL_TO_INT(GVL_IO.aController[i].rControlValue); //Write to Device
		
		GVL_IO.aController_PV[i] := GVL_IO.aAnalogInputIO[i] / (GVL_IO.KL3464MaxValueH * GVL_IO.aMaxValueController[i]);
		GVL_IO.aController_CV[i] := LREAL_TO_REAL((GVL_IO.aController[i].rControlValue / GVL_IO.KL3464MaxValueH)*GVL_IO.aMaxValueController[i]);
		GVL_IO.aController[i]();
	END_IF
	END_FOR
	
	(* Reactor Susceptor Temperature *)
	IF GVL_IO.aMaxValueController[27]<> 0 THEN
		GVL_IO.aController[27].nState := state_Control;
	END_IF	
	
	IF ( GVL_IO.aController_CV[27] > 10 ) THEN
		P11_E3508.bHeaterOn := TRUE;
	ELSE
		P11_E3508.bHeaterOn := FALSE;
	END_IF
	
	GVL_IO.aController[27].nRampTime := GVL_IO.aController_RampTime[27];
	GVL_IO.aController[27].rTargetValue := GVL_IO.aController_TV[27];
	P11_E3508.wControlValue := LREAL_TO_WORD(GVL_IO.aController[27].rControlValue); //Write to Temperature Controller
	
	GVL_IO.aController_PV[27] := WORD_TO_REAL(P11_E3508.wE3508_PV);
	GVL_IO.aController_CV[27] := WORD_TO_REAL(P11_E3508.wControlValue);
	GVL_IO.aController[27]();
					
	(* Reactor Pressure Control *)
	IF (GVL_IO.aController_TV[28] >= 0 ) THEN
		GVL_IO.aController[28].nState := state_Control; //START
	END_IF
	
	GVL_IO.aController[28].nRampTime := GVL_IO.aController_RampTime[28];
	GVL_IO.aController[28].rTargetValue := GVL_IO.aController_TV[28];
	P12_IQ_PLUS.wControlValue := LREAL_TO_WORD(GVL_IO.aController[28].rControlValue); //Write to Pressure Controller
	
	GVL_IO.aController_PV[28] := WORD_TO_REAL(P12_IQ_PLUS.wTValve_PV);
	GVL_IO.aController_CV[28] := WORD_TO_REAL(P12_IQ_PLUS.wControlValue);
	GVL_IO.aController[28]();
	
	(* Suceptor Rotation Control *)				
	IF (GVL_IO.aController_TV[29] >= 0 ) THEN
		GVL_IO.aController[29].nState := state_Control; //START
	END_IF
	
	GVL_IO.aController[29].nRampTime := GVL_IO.aController_RampTime[29];
	GVL_IO.aController[29].rTargetValue := GVL_IO.aController_TV[29];
	P15_RotationOperation.rControlValue := LREAL_TO_REAL(GVL_IO.aController[29].rControlValue); //Write to Rotation Controller (rpm)
	
	GVL_IO.aController_PV[29] := P15_RotationOperation.nConvertedRotation_PV;
	GVL_IO.aController_CV[29] := P15_RotationOperation.rControlValue;
	GVL_IO.aController[29]();	

END_IF]]></ST>
    </Implementation>
    <LineIds Name="P30_ManualControl">
      <LineId Id="256" Count="0" />
      <LineId Id="200" Count="55" />
      <LineId Id="198" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="193" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>