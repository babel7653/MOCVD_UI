<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="P50_RecipeControl" Id="{e332a806-fd31-4290-a7c3-27f42c11d38e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P50_RecipeControl
VAR
	nRcpIndex		: INT;
	nRcpStepTime 	: INT;
	fbRecipeSequencer : FB_RecipeSequencer;
	Pause_TIME		: TIME;
	Pause_ET		: TIME;
	Pause_MAX		: TIME := T#1800S;
	Pause_Step		: INT;
	Pause_TON		: TON;
	Pause_rTrig		: R_TRIG;
	Pause_Ramp		: BOOL;
	Pause_Hold		: BOOL;
	ReStart_TON		: TON;
	Ramp_TON		: TON;
	Hold_TON		: TON;
	Ramp_TIME		: TIME;
	Hold_TIME		: TIME;
	Ramp_ET			: TIME;
	Hold_ET			: TIME;
	rTrigRamp		: R_TRIG;
	rTrigHold		: R_TRIG;
	rTrigLoop		: R_TRIG;
	rTrigWait		: R_TRIG;
	Ramp_On			: BOOL;
	Hold_On			: BOOL;
	Loop_On			: BOOL;
	Wait_On			: BOOL;
	bInitLoop		: BOOL;
	bLoopIng		: BOOL;
	i				: INT;
	k1 : INT;
	k2 : INT;
	k3 : INT;
	k4 : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE RCP.cmd_RcpOperation OF
	0: //Init State
		Rcp.state_RcpOperation := 0;
		nRcpIndex := 0;
		Pause_TON(IN:=FALSE);
		ReStart_TON(IN:=FALSE);
		Ramp_TON(IN:=FALSE);
		Hold_TON(IN:=FALSE);
		Ramp_On := TRUE;
		Hold_On	:= FALSE;
		Loop_On := FALSE;
		Rcp.userState := 0;
		FOR i :=1 TO 6 DO //Loop 초기화
			Rcp.aLoop[i] := -1;
		END_FOR
		bInitLoop := TRUE;
		bLoopIng := FALSE;	
		P92_Maintenance.nCaseSignalTower := 3; // Blue - Idle
		k1 := 0;
		k2 := 0;
		k3 := 0;
		k4 := 0;
		
	10: //RUN
// 		FOR i :=1 TO 6 DO //Loop 초기화
// 			Rcp.aLoop[i] := -1;
// 		END_FOR
		IF nRcpIndex = 0 THEN
			nRcpIndex := 1;
		ELSIF nRcpIndex > Rcp.iRcpTotalStep THEN
			RCP.cmd_RcpOperation := 50;
			P92_Maintenance.nCaseSignalTower := 3; // Blue - Idle
		END_IF
		
		Rcp.userState := 10;
		IF nRcpIndex <= Rcp.iRcpTotalStep THEN
			Rcp.state_RcpOperation := 10; // Recipe Running
			Ramp_TIME := INT_TO_TIME(RCP.aRecipe[nRcpIndex].iRecipe[2]*1000); // second -> milisecond time
			Hold_TIME := INT_TO_TIME(RCP.aRecipe[nRcpIndex].iRecipe[3]*1000);
			fbRecipeSequencer(nRcpIndex := nRcpIndex);
			
			// Loop Paremeter 초기화
			IF bInitLoop AND RCP.aRecipe[nRcpIndex].iRecipe[8] > 0 THEN
				RCP.aLoop[1] := 0; // Current Loop Count
				RCP.aLoop[2] := RCP.aRecipe[nRcpIndex].iRecipe[8]; // Total Loop Number
				RCP.aLoop[3] := nRcpIndex; // Start Step
				RCP.aLoop[4] := RCP.aRecipe[nRcpIndex].iRecipe[9]; // Loop End Step	
				bInitLoop := FALSE;
			END_IF
			//Ramp Operation
			Ramp_TON(IN:=Ramp_On, PT:=Ramp_TIME, ET=>Ramp_ET);
			rTrigRamp(CLK:=Ramp_TON.Q);
			IF rTrigRamp.Q THEN
				Ramp_TON(IN:=FALSE);
				Ramp_On := FALSE;
				Hold_On := TRUE;
				Wait_On := TRUE;
				Loop_On := FALSE;
			END_IF
			
			//Hold Operation
			IF RCP.aRecipe[nRcpIndex].iRecipe[7] = 0 THEN // Time Base : Hold Mode
				Hold_TON(IN:=Hold_On, PT:=Hold_TIME, ET=>Hold_ET);
				rTrigHold(CLK:=Hold_TON.Q);
				IF rTrigHold.Q THEN
					Hold_TON(IN:=FALSE);
					Hold_On := FALSE;
					Wait_On := FALSE;
					Loop_On := TRUE;
				END_IF
				
			ELSIF GVL_IO.aController_PV[27] < RCP.aRecipe[nRcpIndex].iRecipe[7] THEN	
				rTrigWait(CLK:= Wait_On);
				IF rTrigWait.Q THEN
					rTrigWait(CLK:=FALSE);
					Hold_On := FALSE;
					Wait_On := FALSE;
					Loop_On := TRUE;
					FOR i := 5 TO 6 DO //Loop 초기화
						Rcp.aLoop[i] := -1;
					END_FOR
				END_IF
			ELSE
				rTrigWait(CLK:=FALSE);
				Hold_On := FALSE;
				Wait_On := TRUE;
				Loop_On := FALSE;
				RCP.aLoop[5] := RCP.aRecipe[nRcpIndex].iRecipe[7]; //Recipe Wait Temperature
				RCP.aLoop[6] := REAL_TO_INT(GVL_IO.aController_PV[27]); //Susceptor Current Temperature
			END_IF
			
			//Loop Operation
			rTrigLoop(CLK:=Loop_On);
			IF rTrigLoop.Q THEN
				Ramp_On := TRUE;
				Loop_On := FALSE;
				rTrigLoop(CLK:=FALSE);
				
				IF (RCP.aRecipe[nRcpIndex].iRecipe[8] <= 0) AND (bLoopIng = FALSE) THEN //루프 해제
 					nRcpIndex := nRcpIndex + 1; // 다음 스텝
					k1 := k1 +1;
				ELSIF RCP.aLoop[1] < RCP.aLoop[2] AND nRcpIndex < RCP.aLoop[4] AND (bLoopIng = FALSE) THEN //루프 시작
					nRcpIndex := nRcpIndex + 1;
					RCP.aLoop[1] := RCP.aLoop[1] + 1; //Loop Count
					bLoopIng := TRUE;
					k2 := k2 +1;
				ELSIF RCP.aLoop[1] < RCP.aLoop[2] AND nRcpIndex < RCP.aLoop[4] AND (bLoopIng =TRUE) THEN //루프 중간
					nRcpIndex := nRcpIndex + 1;
					k3 := k3 +1;
				ELSIF RCP.aLoop[1] < RCP.aLoop[2] AND nRcpIndex = RCP.aLoop[4] AND (bLoopIng =TRUE) THEN //루프 끝 스텝
					nRcpIndex := RCP.aLoop[3]; // Loop Start
					k4 := k4 +1;
				ELSE
					nRcpIndex := nRcpIndex + 1; // 다음 스텝
					bLoopIng := FALSE;
				END_IF
			END_IF

// 			IF RCP.aRecipe[nRcpIndex].iRecipe[8] <= 0 OR (nRcpIndex > RCP.aRecipe[nRcpIndex].iRecipe[9]) THEN //루프 적용 안됨			
// 				rTrigLoop(CLK:=Loop_On);
// 				IF rTrigLoop.Q THEN
// 					rTrigLoop(CLK:=FALSE);
// 					Ramp_On := TRUE;
// 					Loop_On := FALSE;
// 					nRcpIndex := nRcpIndex + 1; // 다음 스텝
// 				END_IF
// 			ELSE
// 				// Loop Paremeter 초기화
// 				IF bInitLoop THEN
// 					RCP.aLoop[1] := 0; // Current Loop Count
// 					RCP.aLoop[2] := RCP.aRecipe[nRcpIndex].iRecipe[8]; // Total Loop Number
// 					RCP.aLoop[3] := nRcpIndex; // Start Step
// 					RCP.aLoop[4] := RCP.aRecipe[nRcpIndex].iRecipe[9]; // Loop End Step	
// 					bInitLoop := FALSE;
// 				END_IF
// 	
// 				IF 	RCP.aLoop[1] < RCP.aLoop[2] AND nRcpIndex < RCP.aLoop[4] THEN	
// 					rTrigLoop(CLK:=Loop_On);
// 					IF rTrigLoop.Q THEN
// 						rTrigLoop(CLK:=FALSE);
// 						Ramp_On := TRUE;
// 						Loop_On := TRUE;
// 						nRcpIndex := nRcpIndex + 1; // 다음 스텝
// 						RCP.aLoop[1] := RCP.aLoop[1] + 1;
// 						k1 := k1+1;
// 					END_IF
// 				ELSIF RCP.aLoop[1] < RCP.aLoop[2] AND nRcpIndex = RCP.aLoop[4] THEN //종료 스텝
// 					rTrigLoop(CLK:=TRUE);
// 					IF rTrigLoop.Q THEN
// 						rTrigLoop(CLK:=FALSE);
// 						Ramp_On := TRUE;
// 						Loop_On := TRUE;
// 						nRcpIndex := RCP.aLoop[3]; // 루프 시작 스텝
// 						RCP.aLoop[1] := RCP.aLoop[1] + 1; //Current Loop Count
// 						k2 := k2+1;
// 					END_IF
// 				ELSIF RCP.aLoop[1] >= RCP.aLoop[2] THEN //최종 카운트
// 					rTrigLoop(CLK:=Loop_On);
// 					IF rTrigLoop.Q THEN
// 						rTrigLoop(CLK:=FALSE);
// 						Ramp_On := TRUE;
// 						Loop_On := TRUE;
// 						nRcpIndex := nRcpIndex + 1; // 다음 스텝
// 						bInitLoop := FALSE; // 루프변수 초기화
// 						k3 := k3+1;
// 					END_IF				
// 				END_IF 
// 				
// 			END_IF
// 			
		ELSE
			FOR i :=1 TO 6 DO 
				Rcp.aLoop[i] := -1;
			END_FOR
			RCP.cmd_RcpOperation := 50;
			P92_Maintenance.nCaseSignalTower := 4;
		END_IF	
		
	20: //PAUSE
		Rcp.state_RcpOperation := 20;
		
		IF Ramp_On THEN
 			Pause_TIME := Ramp_ET;
			Pause_Ramp := TRUE;
			Pause_Hold := FALSE;
		ELSE
			Pause_TIME := Hold_ET;
			Pause_Ramp := FALSE;
			Pause_Hold := TRUE;
 		END_IF
		
		Ramp_TON(IN:=FALSE);
		Hold_TON(IN:=FALSE);
		
		Pause_TON(IN:=TRUE, PT:= Pause_MAX, ET=> Pause_ET);
		Pause_rTrig(CLK:=Pause_TON.Q);
		IF Pause_rTrig.Q THEN
			Rcp.state_RcpOperation := 90; // Recipe_Alarm
			Pause_TON(IN:=FALSE);
		END_IF	
		Pause_Step := nRcpIndex;
		Rcp.userState := 20;
		P92_Maintenance.nCaseSignalTower := 4;
		
	30: //RESTART
		Rcp.state_RcpOperation := 30;	
		Pause_TON(IN:=FALSE);
		Rcp.userState := 10;
		IF Pause_Ramp THEN
			ReStart_TON(IN:=TRUE, PT:=Ramp_TIME - Pause_TIME, ET=>Ramp_ET);
			rTrigRamp(CLK:=ReStart_TON.Q);
			IF rTrigRamp.Q THEN
				Ramp_TON(IN:=FALSE);
				Ramp_On := FALSE;
				Hold_On := TRUE;
			END_IF
			
			Hold_TON(IN:=Hold_On, PT:=Hold_TIME, ET=>Hold_ET);
			rTrigHold(CLK:=Hold_TON.Q);
			IF rTrigHold.Q THEN
				Hold_TON(IN:=FALSE);
				Hold_On := FALSE;
				Ramp_On := TRUE;
				IF nRcpIndex < Rcp.iRcpTotalStep THEN
					nRcpIndex := nRcpIndex + 1;
					RCP.cmd_RcpOperation := 10;
				ELSE 
					RCP.cmd_RcpOperation := 50;
				END_IF
			END_IF
			
		ELSIF Pause_Hold THEN
			ReStart_TON(IN:=TRUE, PT:=Hold_TIME - Pause_TIME, ET=>Hold_ET);
			rTrigHold(CLK:=ReStart_TON.Q);
			IF rTrigHold.Q THEN
				Hold_TON(IN:=FALSE);
				Hold_On := FALSE;
				Ramp_On := TRUE;
				IF nRcpIndex < Rcp.iRcpTotalStep THEN
					nRcpIndex := nRcpIndex + 1;
					RCP.cmd_RcpOperation := 10;
				ELSE 
					RCP.cmd_RcpOperation := 50;
				END_IF
				ReStart_TON(IN:=FALSE);
			END_IF
		END_IF
		P92_Maintenance.nCaseSignalTower := 3;
		fbRecipeSequencer();
		
	40: //STOP
		Rcp.state_RcpOperation := 40;
		Pause_TON(IN:=FALSE);
		ReStart_TON(IN:=FALSE);
		Rcp.userState := 40;
		P92_Maintenance.nCaseSignalTower := 4;
		fbRecipeSequencer();
		
		FOR i :=1 TO 6 DO //Loop 초기화
			Rcp.aLoop[i] := -1;
		END_FOR
		
	50: //END
		Rcp.state_RcpOperation := 50;
		Rcp.userState := 50;
		fbRecipeSequencer(nRcpIndex := nRcpIndex);
		P92_Maintenance.nCaseSignalTower := 4;
		fbRecipeSequencer();
		
	60: //SKIP
		Ramp_TON(IN:=FALSE);
		Hold_TON(IN:=FALSE);
		Ramp_On := TRUE;
		Hold_On := FALSE;
		nRcpIndex := nRcpIndex + 1;
		RCP.cmd_RcpOperation := 10;
		fbRecipeSequencer();
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="P50_RecipeControl">
      <LineId Id="1" Count="14" />
      <LineId Id="304" Count="0" />
      <LineId Id="615" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="599" Count="1" />
      <LineId Id="613" Count="1" />
      <LineId Id="17" Count="1" />
      <LineId Id="271" Count="1" />
      <LineId Id="270" Count="0" />
      <LineId Id="19" Count="5" />
      <LineId Id="265" Count="0" />
      <LineId Id="26" Count="5" />
      <LineId Id="527" Count="0" />
      <LineId Id="520" Count="6" />
      <LineId Id="313" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="34" Count="15" />
      <LineId Id="51" Count="3" />
      <LineId Id="233" Count="0" />
      <LineId Id="216" Count="3" />
      <LineId Id="221" Count="2" />
      <LineId Id="274" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="229" Count="2" />
      <LineId Id="260" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="567" Count="2" />
      <LineId Id="606" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="607" Count="1" />
      <LineId Id="575" Count="0" />
      <LineId Id="577" Count="1" />
      <LineId Id="601" Count="0" />
      <LineId Id="612" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="616" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="618" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="619" Count="0" />
      <LineId Id="621" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="622" Count="0" />
      <LineId Id="597" Count="1" />
      <LineId Id="493" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="446" Count="1" />
      <LineId Id="484" Count="0" />
      <LineId Id="448" Count="3" />
      <LineId Id="428" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="453" Count="3" />
      <LineId Id="452" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="460" Count="1" />
      <LineId Id="440" Count="1" />
      <LineId Id="485" Count="0" />
      <LineId Id="442" Count="2" />
      <LineId Id="463" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="466" Count="1" />
      <LineId Id="483" Count="0" />
      <LineId Id="468" Count="2" />
      <LineId Id="465" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="476" Count="1" />
      <LineId Id="486" Count="0" />
      <LineId Id="478" Count="3" />
      <LineId Id="488" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="335" Count="5" />
      <LineId Id="103" Count="80" />
      <LineId Id="269" Count="0" />
      <LineId Id="267" Count="1" />
      <LineId Id="266" Count="0" />
      <LineId Id="184" Count="17" />
    </LineIds>
  </POU>
</TcPlcObject>