<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="P90_Interlock" Id="{c8b81d81-de46-4c7a-a894-4387b2cd9bf7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P90_Interlock
VAR_INPUT
	bRecipeRunning : BOOL;
	RecipeStopped : BOOL;
	ManualOperation : BOOL;
	bInductionHeaterMC	: BOOL;
	bThermalBathMC		: BOOL;
	bVacuumPumpMC 		: BOOL;
	bLineHeaterMC 		: BOOL; 
END_VAR
VAR_OUTPUT
	bCoverOperationEnable	: BOOL;
	bDORVacEnable			: BOOL;
	bDORAtmEnable			: BOOL;
	bPowerResetSwitch		: BOOL;
	bMainPowerMonitor		: BOOL;
	bRecipeEnable			: BOOL;
	AlarmTrig				: BOOL;
	WarningTrig				: BOOL;
END_VAR	
VAR
	bMaintKey				: BOOL;
	bSafetyGasState			: BOOL;
	bAlarmState				: BOOL;
	bPowerResetLED			: BOOL;
	bUPSMode				: BOOL;

	bAirPressureSensor		: BOOL;
	bWaterFlowSensor		: BOOL;
	
	AlarmState_A			: BOOL;
	WarningState_A			: BOOL;
	AlarmState_D			: BOOL;
	WarningState_D			: BOOL;
	Alarm_TON				: TON;
	Warning_TON				: TON;
	rTrigAlarm				: R_TRIG;
	Alarm_ET				: TIME;
	rTrigWarning			: R_TRIG;
	Warning_ET				: TIME;
	
	tAlarmDelay_A			: TIME; //아날로그 디바이스 지연시간
	tAlarmDelay_D			: TIME; //디지털 디바이스 지연시간
	fbDeviceAlarm	:ARRAY[1..26] OF FB_DeviceAlarm; // MFC/EPC 디바이스 인스턴스
	wDeviceAlarmEnable		: DWORD;
	bDeviationAlarm			: BOOL;
	wDeviceAlarm			: DWORD;
	
	bMaintKeyTest			: BOOL; //Test Variable
	i: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Read from Device*)
//Interlock Variable Set
bMaintKey := GVL_IO.aDigitalInputIO[1].0;
bPowerResetSwitch := GVL_IO.aDigitalInputIO[1].1;
bMainPowerMonitor := GVL_IO.aDigitalInputIO[7].5;
bAirPressureSensor	:= GVL_IO.aDigitalInputIO[2].0; //Normally Contacted
bWaterFlowSensor	:= GVL_IO.aDigitalInputIO[2].1;

//Sinal Tower Set
IF bMaintKeyTest THEN //bMaintKey 변경
	P92_Maintenance.nCaseSignalTower		:= 5;
ELSIF bMaintKey = FALSE AND MAIN.bOperationMode = FALSE THEN
	P92_Maintenance.nCaseSignalTower		:= 4;
END_IF

//알람 지연 시간 변환
tAlarmDelay_A := REAL_TO_TIME(GVL_IO.aInterlockSet[3]*1000); // UI Setting Analog Delay Time Value(Miliseconde)
tAlarmDelay_D := REAL_TO_TIME(GVL_IO.aInterlockSet[4]*1000);

//Controller Deviation Alarm Monitoring
FOR i := 1 TO 26 DO
	wDeviceAlarmEnable := SHR(GVL_IO.aInterlockEnable[2], (i+2)); //오늘쪽 쉬프트 연산
	fbDeviceAlarm[i](
		bEnable := wDeviceAlarmEnable.0,
		fCurrentValue := GVL_IO.aController_PV[i],
		fControlValue := GVL_IO.aController_CV[i],
		fMaxValue := GVL_IO.aMaxValueController[i],
		fAlarmTreshold := GVL_IO.aInterlockSet[i],
		tAlarmDelay := tAlarmDelay_A,
		bDeviationAlarm => bDeviationAlarm //알람 출력
		);
	IF bDeviationAlarm THEN		
		GVL_IO.aInterlock[1].0 := TRUE; //Alarm Trig
		wDeviceAlarm := ROR(GVL_IO.aInterlock[3], (i+2));
		wDeviceAlarm.0 := TRUE;
		GVL_IO.aInterlock[3] := ROL(wDeviceAlarm, (i+2));
	ELSE
		wDeviceAlarm := ROR(GVL_IO.aInterlock[3], (i+2));
		wDeviceAlarm.0 := FALSE;
		GVL_IO.aInterlock[3] := ROL(wDeviceAlarm, (i+2));
	END_IF

	IF GVL_IO.aInterlockEnable[1].0 THEN //리셋 버턴을 눌렀을 때
		GVL_IO.aInterlock[1].0 := FALSE; //Alarm Trig Reset
	END_IF
END_FOR

//Controller Deviation Warning Monitoring



// 테스트용 값 bMaintKey -> bMaintKeyTest
//Allowed a MC(Induction, Bath, Pump, L_Heater) Operation
//IF P90_Interlock.bMaintKey THEN
IF bMaintKeyTest THEN
	P92_Maintenance.nCaseSignalTower := 4;
	GVL_IO.aDigitalOutputIO[3].0 := bInductionHeaterMC;
	GVL_IO.aDigitalOutputIO[3].1 := bThermalBathMC;
	GVL_IO.aDigitalOutputIO[3].2 := bVacuumPumpMC;
	GVL_IO.aDigitalOutputIO[3].3 := bLineHeaterMC;
ELSE
	//Gas Pressure Alarm H2
	IF GVL_IO.aMonitoring_PV_Test[4] < GVL_IO.aInterlockSet[5] THEN
		GVL_IO.aInterlock[1].2 	:= TRUE; //N2 Pressure Low Alarm
		GVL_IO.aInterlock[2].0  := TRUE; // Alarm Pop-up
		GVL_IO.aInterlock[1].3 	:= FALSE;
		AlarmState_A	:= TRUE;
	ELSIF (GVL_IO.aInterlockSet[5] <= GVL_IO.aMonitoring_PV_Test[4]) AND (GVL_IO.aMonitoring_PV_Test[4] < GVL_IO.aInterlockSet[6]) THEN
		GVL_IO.aInterlock[1].2 	:= FALSE;
		GVL_IO.aInterlock[1].3 	:= TRUE; //N2 Pressure Low Warning
		GVL_IO.aInterlock[4].0	:= TRUE;	// Warning Pop-up
		WarningState_A	:= TRUE;
	ELSE
		GVL_IO.aInterlock[1].2 	:= FALSE;
		GVL_IO.aInterlock[2].0  := FALSE; // Alarm Pop-up
		GVL_IO.aInterlock[1].3 	:= FALSE;
		GVL_IO.aInterlock[4].0	:= FALSE;	// Warning Pop-up
		AlarmState_A			:= FALSE;
		WarningState_A			:= FALSE;
	END_IF
	
	Alarm_TON(IN:=AlarmState_A, PT:=tAlarmDelay_A, ET=>Alarm_ET);
	rTrigAlarm(CLK:=Alarm_TON.Q);
	IF rTrigAlarm.Q	THEN
		Alarm_TON(IN:=FALSE);
		AlarmState_A :=FALSE;
		AlarmTrig := TRUE;
	END_IF
	
	Warning_TON(IN:=WarningState_A, PT:=tAlarmDelay_A, ET=>Warning_ET);
	rTrigWarning(CLK:=Warning_TON.Q);
	IF rTrigWarning.Q THEN
		Warning_TON(IN:=FALSE);
		WarningState_A :=FALSE;
		WarningTrig := TRUE;
	END_IF
	
END_IF

//Alarm Trig Reset
IF GVL_IO.aInterlockEnable[1].0 THEN
	GVL_IO.aInterlockEnable[1].0 := FALSE; // Reset Button Toggle
	GVL_IO.aInterlock[2] := 0; // Alarm Popup Reset
	GVL_IO.aInterlock[3] := 0; // Alarm Popup Reset
	AlarmTrig := FALSE;
END_IF

//Warning Trig Reset
IF GVL_IO.aInterlockEnable[1].1 THEN
	GVL_IO.aInterlockEnable[1].1 := FALSE; // Reset Button Toggle
	GVL_IO.aInterlock[4] := 0; // Alarm Popup Reset
	GVL_IO.aInterlock[5] := 0; // Alarm Popup Reset
	WarningTrig := FALSE;
END_IF

// For Test Value
bSafetyGasState := TRUE;

// AND Valve01 = FALSE(H2) AND Valve02 = FALSE(H2) AND Valve03(SiH4) AND Valve04(NH2)
// All MO-Source ByPass Stat
bAlarmState := TRUE;

bCoverOperationEnable := bSafetyGasState AND bAlarmState AND P17_DOROperation.isDOROnState = FALSE; //For Test -P16
// bCoverOpenEnable := ing_Racipe AND bAlarmClear AND isInductionHeater = FAULSE

bDORVacEnable := P16_CoverOperation.isCoverClosed AND bAlarmState AND bSafetyGasState AND P17_DOROperation.isDOROnState = FALSE; //For Test -P17
// add : Vacuum Pump ON
bDORAtmEnable := bAlarmState AND bSafetyGasState AND P17_DOROperation.isDOROnState = TRUE;
// Susceptor Temperature, Vacuum Range > 700Torr

//bRecipeEnable := bMaintKey=FALSE AND bRecipeRunning=FALSE AND P16_CoverOperation.isCoverClosed AND P12_IQ_PLUS.bPumpOn;
bRecipeEnable := TRUE;

(* Out to Device*)
GVL_IO.aDigitalOutputIO[3].7 := bPowerResetLED;
GVL_IO.aDigitalOutputIO[2].4 := bUPSMode;
]]></ST>
    </Implementation>
    <LineIds Name="P90_Interlock">
      <LineId Id="139" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="304" Count="1" />
      <LineId Id="307" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="301" Count="1" />
      <LineId Id="299" Count="0" />
      <LineId Id="353" Count="1" />
      <LineId Id="322" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="438" Count="1" />
      <LineId Id="451" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="444" Count="5" />
      <LineId Id="443" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="455" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="460" Count="1" />
      <LineId Id="471" Count="0" />
      <LineId Id="476" Count="1" />
      <LineId Id="475" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="466" Count="1" />
      <LineId Id="462" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="480" Count="1" />
      <LineId Id="483" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="313" Count="2" />
      <LineId Id="318" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="319" Count="1" />
      <LineId Id="326" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="327" Count="1" />
      <LineId Id="365" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="356" Count="1" />
      <LineId Id="321" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="349" Count="2" />
      <LineId Id="367" Count="1" />
      <LineId Id="352" Count="0" />
      <LineId Id="346" Count="1" />
      <LineId Id="381" Count="1" />
      <LineId Id="384" Count="3" />
      <LineId Id="383" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="374" Count="6" />
      <LineId Id="339" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="83" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="415" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>