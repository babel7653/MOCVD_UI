<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="P12_IQ_PLUS" Id="{e511b755-5d71-4ab9-9c97-639ef910a29b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P12_IQ_PLUS
VAR_INPUT
	nPressureTargetValue : WORD := 760;//Pressure Set Value
	nRampTime			: INT := 1; //Second
	//wSetPoint 			: WORD; //Set Point
	nSetType 			: USINT; //1:Pressure Conrol, 2:Position Control
	nTValveMode 		: USINT := 0; //Valve Mode
	bPumpOn				: BOOL;
	bPumpReset			: BOOL;
	
	bEnable				: BOOL; //Value Change

END_VAR
VAR_OUTPUT
	rPressurePV_CD1 	: REAL; //CD2 Current Pressure
	rPressurePV_CD2 	: REAL; //CD2 Current Pressure
	rValvePosition 		: REAL; //Valve Position
	bVacuumPumpCB		: BOOL;
	bThrottleValveCP	: BOOL;
	nPressureControlValue	: INT;

	//nInputStatus
	ingPressureControl 	: BOOL;
	ingPositionControl 	: BOOL;
	isValveOpen 			: BOOL;
	isValveNotInitialized 	: BOOL;	
	isValveClosed 			: BOOL;
	isValveFaultState 		: BOOL;
	ingValveInitializing 	: BOOL;
	ingHoldState 			: BOOL;
	
	// Vacuum Pump Status
	isPumpFault				: BOOL;
	isPumpWarning			: BOOL;
	isPumpAlarm				: BOOL;
	isFBRunning				: BOOL;
	isPumpRunning			: BOOL;
	
END_VAR
VAR
	//Input from IQ-PLUS Throttle Valve
	nInputStatus AT %I* : USINT; //Input Status Bytes
	aInputPressurePV_CDG1 AT %I* : ARRAY[1..2]OF USINT; //CDG1 Pressure
	aInputPressurePV_CDG2 AT %I* : ARRAY[1..2]OF USINT; //CDG2 Pressure
	aInputPressureSP AT %I* : ARRAY[1..2]OF USINT; //Set Point Pressure
	aInputValvePosionPV AT %I* : ARRAY[1..2]OF USINT; //Current Valve Position
	
	wOutputSetPoint : WORD;
	oSetPoint : outWord; //Word to Byte variable
	
	//Output to IQ-PLUS Throttle Valve
	nOutputMode AT %Q* : USINT;
	aOutputSPBytes AT %Q* : ARRAY[1..2]OF USINT; //Set Pressure
	nOutputSetType AT %Q* : USINT; //1:Pressure Control, 2:Valve Position Control
	wInputPressurePV_CDG1 : WORD; //CDG1 Current Pressure, Not Used
	wInputPressurePV_CDG2 : WORD; //CDG2 Current Pressure
	wInputValvePosition : WORD; //Current Valve Position (0~100%)
	nInputStatusOld : USINT := 9; //Value Change Monitoring, First Temp value
	
	// for FB_CTRL_RAMP_GENERATOR Variable
	(* input *)
	rPressureTargetValue 		: REAL;
	rPressureStartValue 		: REAL := 760;
	(* output *)
	rPressureControlValue		: LREAL;
	bValueReached				: BOOL;
	(* function block *)
	fbCTRL_RAMP_GENERATOR			: FB_CTRL_RAMP_GENERATOR;
	stCTRL_RAMP_GENERATOR_PARAMS	: ST_CTRL_RAMP_GENERATOR_PARAMS;
	eErrorId						: E_CTRL_ERRORCODES;
	bError							: BOOL;
	bInit						: BOOL := TRUE;	
	(* Operation Parameter*)
	rRampingRatio				: REAL;	
END_VAR
VAR CONSTANT
	//Conversion Parameter
	SetPointFactor : REAL := 327.67; //Range 0~7FFFh
	PressureFactor : REAL := 24.576;	//Range 0~6000h
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Model : IQ Plus 
//Pressure Range : 0 ~ 1,000 Torr

(* Read from Power Distribution Pannel *)
bVacuumPumpCB		:= GVL_IO.aDigitalInputIO[5].1;
bThrottleValveCP 	:= GVL_IO.aDigitalInputIO[5].5; //Throttle Valve CP

(* Read from Vacuum Pump *)
isPumpFault			:= GVL_IO.aDigitalInputIO[2].7;
isPumpWarning		:= GVL_IO.aDigitalInputIO[3].0;
isPumpAlarm			:= GVL_IO.aDigitalInputIO[3].1;
isFBRunning			:= GVL_IO.aDigitalInputIO[3].2;
isPumpRunning		:= GVL_IO.aDigitalInputIO[3].3;

(* Read from Device Value *)
// 2USINT to WORD
wInputPressurePV_CDG1 	:= USINT_TO_WORD_Bit(aInputPressurePV_CDG1[1],aInputPressurePV_CDG1[2]);
wInputPressurePV_CDG2 	:= USINT_TO_WORD_Bit(aInputPressurePV_CDG2[1],aInputPressurePV_CDG2[2]);
wInputValvePosition 	:= USINT_TO_WORD_Bit(aInputValvePosionPV[1], aInputValvePosionPV[2]);

//From IQ Plus
rPressurePV_CD1 := WORD_TO_REAL(wInputPressurePV_CDG1)/PressureFactor;
rPressurePV_CD2 := WORD_TO_REAL(wInputPressurePV_CDG2)/PressureFactor;
rValvePosition := WORD_TO_REAL(wInputValvePosition)/SetPointFactor;

//To IQ Plus
IF nTValveMode = 0 AND nSetType = 1 THEN
	rPressureTargetValue := nPressureTargetValue * SetPointFactor * 0.1; //Pressure Control
ELSIF nTValveMode = 0 AND nSetType = 2 THEN
	rPressureTargetValue := nPressureTargetValue * SetPointFactor; // Position Control
END_IF

//Ramp Generator
IF nRampTime <> 0 THEN
	rRampingRatio := ABS(rPressureTargetValue - rPressureStartValue) / nRampTime * 0.1; // Second
END_IF

bEnable	:= TRUE;

IF (rPressureTargetValue > 0) OR (rPressureStartValue > 0) THEN
	bInit := TRUE;
ELSIF (rPressureTargetValue = 0) AND (rPressureStartValue = 0) THEN
	bInit := FALSE;
END_IF

IF bInit THEN
	(* init parameter struct *)
	stCTRL_RAMP_GENERATOR_PARAMS.tTaskCycleTime		:= T#100MS;
	stCTRL_RAMP_GENERATOR_PARAMS.tCtrlCycleTime		:= T#100MS;
	stCTRL_RAMP_GENERATOR_PARAMS.fVeloPos			:= rRampingRatio; (* in units per second *)
	stCTRL_RAMP_GENERATOR_PARAMS.fVeloNeg			:= rRampingRatio; (* in units per second *)
	(* reset the init flag *)
	bInit := FALSE;
END_IF

IF rPressureTargetValue <> rPressureStartValue THEN
	bEnable := TRUE;
	(* call function block *)
	fbCTRL_RAMP_GENERATOR(
		bEnable			:= bEnable,
		fStart			:= rPressureStartValue,
		fTarget			:= rPressureTargetValue,
		stParams		:= stCTRL_RAMP_GENERATOR_PARAMS,
		fOut			=> rPressureControlValue,
		bValueReached	=> bValueReached,
		bError			=> bError,
		eErrorId		=> eErrorId);
ELSE
	fbCTRL_RAMP_GENERATOR.bEnable := FALSE;
END_IF

IF bValueReached THEN
	rPressureStartValue := LREAL_TO_REAL(rPressureControlValue);
END_IF

wOutputSetPoint := LREAL_TO_WORD(rPressureControlValue);
oSetPoint := WORD_TO_USINT_Bit(wOutputSetPoint);
aOutputSPBytes[1] := oSetPoint.Lower;
aOutputSPBytes[2] := oSetPoint.Upper;

nOutputSetType := nSetType;

//Valve Status Initailize
IF nInputStatus <> nInputStatusOld THEN
	// Staus Initializing
	ingPressureControl := FALSE;
	ingPositionControl := FALSE;
	isValveOpen := FALSE;
	isValveNotInitialized := FALSE;	
	isValveClosed := FALSE;
	isValveFaultState := FALSE;
	ingValveInitializing := FALSE;
	ingHoldState := FALSE;
	// Status Update	
	nInputStatusOld := nInputStatus;
END_IF

//Update Valve Status
CASE nInputStatus OF
	0 : ingPressureControl := TRUE; //Pressure Control Performing.
	1 : ingPositionControl := TRUE; //Position Control Performing.	
	2 : isValveOpen := TRUE; //Valve Open, Stopped, Not Controlling.
	3 : isValveNotInitialized := TRUE; //Valve not initialized power on or RESET Command.
	4 : isValveClosed := TRUE; //Valve Closed, Stopped, Not Controlling.
	5 : isValveFaultState := TRUE; //Has faulted during valve initialization or operation.
	6 : ingValveInitializing := TRUE; //Initailizing Process.
	8 : ingHoldState := TRUE; //intermediate position, not at open or close and not controlling pressure.
END_CASE

// nOutputMode
// 0 : uses setpoint and setpoint type to control the valve.
// 1 : Does not use setpoint and setpoint type to operate the valve.
// 2 : Does not use setpoint and setpoint type to operate the valve.
// 3 : Holds valve in current position.
// 4 : Reset the controller.
nOutputMode := nTValveMode;
nPressureControlValue := LREAL_TO_INT(rPressureControlValue);
GVL_IO.aDigitalOutputIO[2].2 := bPumpOn; //Pump On
GVL_IO.aDigitalOutputIO[2].3 := bPumpReset; // Pump Reset]]></ST>
    </Implementation>
    <LineIds Name="P12_IQ_PLUS">
      <LineId Id="273" Count="2" />
      <LineId Id="209" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="288" Count="1" />
      <LineId Id="279" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="52" Count="15" />
      <LineId Id="297" Count="1" />
      <LineId Id="301" Count="0" />
      <LineId Id="306" Count="1" />
      <LineId Id="310" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="312" Count="4" />
      <LineId Id="311" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="328" Count="7" />
      <LineId Id="327" Count="0" />
      <LineId Id="336" Count="14" />
      <LineId Id="217" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="354" Count="1" />
      <LineId Id="353" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="68" Count="39" />
      <LineId Id="5" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="293" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>